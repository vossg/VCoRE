/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Item!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#include "OSGConfig.h"



#include "OSGFieldContainer.h"          // Parent Class

#include "OSGVCoREItemBase.h"
#include "OSGVCoREItem.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

VCORE_IMPORT_NAMESPACE;

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::Item
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var FieldContainer * ItemBase::_sfParent
    
*/

/*! \var Int32           ItemBase::_sfPostDFMixinTestField
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<Item *, nsVCoRE>::_type(
    "ItemPtr", 
    "VCDynFieldContainerPtr", 
    Item::getClassType(),
    nsVCoRE);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(Item *, nsVCoRE)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           Item *,
                           nsVCoRE);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           Item *,
                           nsVCoRE);

DataType &FieldTraits< Item *, nsVCoRE + 1 >::getType(void)
{
    return FieldTraits<Item *, nsVCoRE>::getType();
}


OSG_EXPORT_PTR_SFIELD(ChildPointerSField,
                      Item *,
                      UnrecordedRefCountPolicy,
                      nsVCoRE + 1);


OSG_EXPORT_PTR_MFIELD(ChildPointerMField,
                      Item *,
                      UnrecordedRefCountPolicy,
                      nsVCoRE + 1);


OSG_END_NAMESPACE

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

VCORE_BEGIN_NAMESPACE

OSG_IMPORT_NAMESPACE;

void ItemBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFParentFieldContainerPtr::Description(
        SFParentFieldContainerPtr::getClassType(),
        "parent",
        "",
        ParentFieldId, ParentFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast     <FieldEditMethodSig>(&Item::invalidEditField),
        static_cast     <FieldGetMethodSig >(&Item::invalidGetField));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "postDFMixinTestField",
        "",
        PostDFMixinTestFieldFieldId, PostDFMixinTestFieldFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Item::editHandlePostDFMixinTestField),
        static_cast<FieldGetMethodSig >(&Item::getHandlePostDFMixinTestField));

    oType.addInitialDesc(pDesc);
}


ItemBase::TypeObject ItemBase::_type(
    ItemBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsVCoRE, //Namespace
    reinterpret_cast<PrototypeCreateF>(&ItemBase::createEmptyLocal),
    Item::initMethod,
    Item::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&Item::classDescInserter),
    true,
    0,
    "<?xml version=\"1.0\" ?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"Item\"\n"
    "   parent=\"VCDynFieldContainer\"\n"
    "   library=\"VCoREBase\"\n"
    "   structure=\"concrete\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   isNodeCore=\"true\"\n"
    "   docGroupBase=\"GrpVCoREBase\"\n"
    "   typeDescAddable=\"true\"\n"
    "   dynFCDerived=\"true\"\n"
    "   childFields=\"both\"\n"
    "   libnamespace=\"VCoRE\"\n"
    "   >\n"
    "  <Field\n"
    "      name=\"parent\"\n"
    "      type=\"FieldContainer\"\n"
    "      cardinality=\"single\"\n"
    "      visibility=\"internal\"\n"
    "      access=\"none\"\n"
    "      category=\"parentpointer\"\n"
    "      >\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"postDFMixinTestField\"\n"
    "     type=\"Int32\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     defaultValue=\"10\"\n"
    "     >\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ItemBase::getType(void)
{
    return _localType;
}

const FieldContainerType &ItemBase::getType(void) const
{
    return _localType;
}

UInt32 ItemBase::getContainerSize(void) const
{
    return sizeof(Item);
}

ItemBase::TypeObject &ItemBase::getFinalType(void)
{
    return _type;
}

const ItemBase::TypeObject &ItemBase::getFinalType(void) const
{
    return _type;
}

/*------------------------- decorator get ------------------------------*/



SFInt32 *ItemBase::editSFPostDFMixinTestField(void)
{
    editSField(PostDFMixinTestFieldFieldMask);

    return &_sfPostDFMixinTestField;
}

const SFInt32 *ItemBase::getSFPostDFMixinTestField(void) const
{
    return &_sfPostDFMixinTestField;
}






/*------------------------------ access -----------------------------------*/

SizeT ItemBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ParentFieldMask & whichField))
    {
        returnValue += _sfParent.getBinSize();
    }
    if(FieldBits::NoField != (PostDFMixinTestFieldFieldMask & whichField))
    {
        returnValue += _sfPostDFMixinTestField.getBinSize();
    }

    return returnValue;
}

void ItemBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ParentFieldMask & whichField))
    {
        _sfParent.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PostDFMixinTestFieldFieldMask & whichField))
    {
        _sfPostDFMixinTestField.copyToBin(pMem);
    }
}

void ItemBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ParentFieldMask & whichField))
    {
        editSField(ParentFieldMask);
        _sfParent.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PostDFMixinTestFieldFieldMask & whichField))
    {
        editSField(PostDFMixinTestFieldFieldMask);
        _sfPostDFMixinTestField.copyFromBin(pMem);
    }
}

//! create a new instance of the class
ItemTransitPtr ItemBase::createLocal(BitVector bFlags)
{
    ItemTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<Item>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
ItemTransitPtr ItemBase::createDependent(BitVector bFlags)
{
    ItemTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<Item>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
ItemTransitPtr ItemBase::create(void)
{
    ItemTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<Item>(tmpPtr);
    }

    return fc;
}

Item *ItemBase::createEmptyLocal(BitVector bFlags)
{
    Item *returnValue;

    newPtr<Item>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
Item *ItemBase::createEmpty(void)
{
    Item *returnValue;

    newPtr<Item>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr ItemBase::shallowCopyLocal(
    BitVector bFlags) const
{
    Item *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const Item *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr ItemBase::shallowCopyDependent(
    BitVector bFlags) const
{
    Item *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const Item *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr ItemBase::shallowCopy(void) const
{
    Item *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const Item *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

ItemBase::ItemBase(void) :
    Inherited(),
    _sfParent                 (NULL),
    _sfPostDFMixinTestField   (Int32(10))
{
}

ItemBase::ItemBase(const ItemBase &source) :
    Inherited(source),
    _sfParent                 (NULL),
    _sfPostDFMixinTestField   (source._sfPostDFMixinTestField   )
{
}


/*-------------------------- destructors ----------------------------------*/

ItemBase::~ItemBase(void)
{
}
/*-------------------------------------------------------------------------*/
/* Parent linking                                                          */

bool ItemBase::linkParent(
    FieldContainer * const pParent,
    UInt16           const childFieldId,
    UInt16           const parentFieldId )
{
    if(parentFieldId == ParentFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            FieldContainer *pOldParent =
                _sfParent.getValue         ();

            UInt16 oldChildFieldId =
                _sfParent.getParentFieldPos();

            if(pOldParent != NULL)
            {
                pOldParent->unlinkChild(this, oldChildFieldId);
            }

            editSField(ParentFieldMask);

            _sfParent.setValue(static_cast<FieldContainer *>(pParent), childFieldId);

            return true;
        }

        return false;
    }

    return Inherited::linkParent(pParent, childFieldId, parentFieldId);
}

bool ItemBase::unlinkParent(
    FieldContainer * const pParent,
    UInt16           const parentFieldId)
{
    if(parentFieldId == ParentFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            if(_sfParent.getValue() == pTypedParent)
            {
                editSField(ParentFieldMask);

                _sfParent.setValue(NULL, 0xFFFF);

                return true;
            }

            SWARNING << "Child (["          << this
                     << "] id ["            << this->getId()
                     << "] type ["          << this->getType().getCName()
                     << "] parentFieldId [" << parentFieldId
                     << "]) - Parent (["    << pParent
                     << "] id ["            << pParent->getId()
                     << "] type ["          << pParent->getType().getCName()
                     << "]): link inconsistent!"
                     << std::endl;

            return false;
        }

        return false;
    }

    return Inherited::unlinkParent(pParent, parentFieldId);
}



GetFieldHandlePtr ItemBase::getHandleParent          (void) const
{
    SFParentFieldContainerPtr::GetHandlePtr returnValue;

    return returnValue;
}

EditFieldHandlePtr ItemBase::editHandleParent         (void)
{
    EditFieldHandlePtr returnValue;

    return returnValue;
}

GetFieldHandlePtr ItemBase::getHandlePostDFMixinTestField (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfPostDFMixinTestField,
             this->getType().getFieldDesc(PostDFMixinTestFieldFieldId),
             const_cast<ItemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ItemBase::editHandlePostDFMixinTestField(void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfPostDFMixinTestField,
             this->getType().getFieldDesc(PostDFMixinTestFieldFieldId),
             this));


    editSField(PostDFMixinTestFieldFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ItemBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Item *pThis = static_cast<Item *>(this);

    pThis->execSync(static_cast<Item *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *ItemBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    Item *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const Item *>(pRefAspect),
                  dynamic_cast<const Item *>(this));

    return returnValue;
}
#endif

void ItemBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


VCORE_END_NAMESPACE
