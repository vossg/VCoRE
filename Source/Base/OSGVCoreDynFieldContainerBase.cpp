/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class VCoreDynFieldContainer!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#include "OSGConfig.h"




#include "OSGVCoreDynFieldContainerBase.h"
#include "OSGVCoreDynFieldContainer.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::VCoreDynFieldContainer
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Int32           VCoreDynFieldContainerBase::_sfPreDFMixinTestField
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<VCoreDynFieldContainer *>::_type("VCoreDynFieldContainerPtr", "AttachmentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(VCoreDynFieldContainer *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           VCoreDynFieldContainer *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           VCoreDynFieldContainer *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void VCoreDynFieldContainerBase::classDescInserter(TypeObject &oType)
{
    Inherited::classDescInserter(oType);

    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "preDFMixinTestField",
        "",
        PreDFMixinTestFieldFieldId, PreDFMixinTestFieldFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&VCoreDynFieldContainer::editHandlePreDFMixinTestField),
        static_cast<FieldGetMethodSig >(&VCoreDynFieldContainer::getHandlePreDFMixinTestField));

    oType.addInitialDesc(pDesc);
}


VCoreDynFieldContainerBase::TypeObject VCoreDynFieldContainerBase::_type(
    VCoreDynFieldContainerBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    VCoreDynFieldContainer::initMethod,
    VCoreDynFieldContainer::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&VCoreDynFieldContainer::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\" ?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"VCoreDynFieldContainer\"\n"
    "   parent=\"AttachmentContainer\"\n"
    "   library=\"VCoreBase\"\n"
    "   mixinparent=\"VCoreDynFieldContainerParent\"\n"
    "   structure=\"abstract\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   isNodeCore=\"true\"\n"
    "   docGroupBase=\"GrpVCoreBase\"\n"
    "   >\n"
    "  <Field\n"
    "     name=\"preDFMixinTestField\"\n"
    "     type=\"Int32\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     defaultValue=\"5\"\n"
    "     >\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &VCoreDynFieldContainerBase::getType(void)
{
    return _type;
}

const FieldContainerType &VCoreDynFieldContainerBase::getType(void) const
{
    return _type;
}

UInt32 VCoreDynFieldContainerBase::getContainerSize(void) const
{
    return sizeof(VCoreDynFieldContainer);
}

/*------------------------- decorator get ------------------------------*/


SFInt32 *VCoreDynFieldContainerBase::editSFPreDFMixinTestField(void)
{
    editSField(PreDFMixinTestFieldFieldMask);

    return &_sfPreDFMixinTestField;
}

const SFInt32 *VCoreDynFieldContainerBase::getSFPreDFMixinTestField(void) const
{
    return &_sfPreDFMixinTestField;
}






/*------------------------------ access -----------------------------------*/

UInt32 VCoreDynFieldContainerBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (PreDFMixinTestFieldFieldMask & whichField))
    {
        returnValue += _sfPreDFMixinTestField.getBinSize();
    }

    return returnValue;
}

void VCoreDynFieldContainerBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (PreDFMixinTestFieldFieldMask & whichField))
    {
        _sfPreDFMixinTestField.copyToBin(pMem);
    }
}

void VCoreDynFieldContainerBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (PreDFMixinTestFieldFieldMask & whichField))
    {
        editSField(PreDFMixinTestFieldFieldMask);
        _sfPreDFMixinTestField.copyFromBin(pMem);
    }
}




/*------------------------- constructors ----------------------------------*/

VCoreDynFieldContainerBase::VCoreDynFieldContainerBase(void) :
    Inherited(),
    _sfPreDFMixinTestField    (Int32(5))
{
}

VCoreDynFieldContainerBase::VCoreDynFieldContainerBase(const VCoreDynFieldContainerBase &source) :
    Inherited(source),
    _sfPreDFMixinTestField    (source._sfPreDFMixinTestField    )
{
}


/*-------------------------- destructors ----------------------------------*/

VCoreDynFieldContainerBase::~VCoreDynFieldContainerBase(void)
{
}


GetFieldHandlePtr VCoreDynFieldContainerBase::getHandlePreDFMixinTestField (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfPreDFMixinTestField,
             this->getType().getFieldDesc(PreDFMixinTestFieldFieldId),
             const_cast<VCoreDynFieldContainerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VCoreDynFieldContainerBase::editHandlePreDFMixinTestField(void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfPreDFMixinTestField,
             this->getType().getFieldDesc(PreDFMixinTestFieldFieldId),
             this));


    editSField(PreDFMixinTestFieldFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void VCoreDynFieldContainerBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    VCoreDynFieldContainer *pThis = static_cast<VCoreDynFieldContainer *>(this);

    pThis->execSync(static_cast<VCoreDynFieldContainer *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void VCoreDynFieldContainerBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
