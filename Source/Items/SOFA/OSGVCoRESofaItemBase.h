/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SofaItem
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGSOFAITEMBASE_H_
#define _OSGSOFAITEMBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGVCoREItemSofaDef.h"

//#include "OSGBaseTypes.h"

#include "OSGVCoREOSGTreeItem.h" // Parent

#include "OSGSysFields.h"               // RotationSpeed type
#include "OSGBaseFields.h"              // SofaSceneFile type
#include "OSGMouseDataFields.h"         // MouseData type

#include "OSGVCoRESofaItemFields.h"

VCORE_BEGIN_NAMESPACE

OSG_IMPORT_NAMESPACE;

class SofaItem;

//! \brief SofaItem Base Class.

class OSG_VCOREITEMSOFA_DLLMAPPING SofaItemBase : public OSGTreeItem
{
  public:

    typedef OSGTreeItem Inherited;
    typedef OSGTreeItem ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(SofaItem);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        RotationSpeedFieldId = Inherited::NextFieldId,
        SofaSceneFileFieldId = RotationSpeedFieldId + 1,
        IgnoreSofaLightsFieldId = SofaSceneFileFieldId + 1,
        AnimateFieldId = IgnoreSofaLightsFieldId + 1,
        ResetFieldId = AnimateFieldId + 1,
        ShadowModeFieldId = ResetFieldId + 1,
        MouseDataFieldId = ShadowModeFieldId + 1,
        NextFieldId = MouseDataFieldId + 1
    };

    static const OSG::BitVector RotationSpeedFieldMask =
        (TypeTraits<BitVector>::One << RotationSpeedFieldId);
    static const OSG::BitVector SofaSceneFileFieldMask =
        (TypeTraits<BitVector>::One << SofaSceneFileFieldId);
    static const OSG::BitVector IgnoreSofaLightsFieldMask =
        (TypeTraits<BitVector>::One << IgnoreSofaLightsFieldId);
    static const OSG::BitVector AnimateFieldMask =
        (TypeTraits<BitVector>::One << AnimateFieldId);
    static const OSG::BitVector ResetFieldMask =
        (TypeTraits<BitVector>::One << ResetFieldId);
    static const OSG::BitVector ShadowModeFieldMask =
        (TypeTraits<BitVector>::One << ShadowModeFieldId);
    static const OSG::BitVector MouseDataFieldMask =
        (TypeTraits<BitVector>::One << MouseDataFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFReal32          SFRotationSpeedType;
    typedef SFString          SFSofaSceneFileType;
    typedef SFBool            SFIgnoreSofaLightsType;
    typedef SFBool            SFAnimateType;
    typedef SFBool            SFResetType;
    typedef SFUInt32          SFShadowModeType;
    typedef SFMouseData       SFMouseDataType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFReal32            *editSFRotationSpeed  (void);
            const SFReal32            *getSFRotationSpeed   (void) const;

                  SFString            *editSFSofaSceneFile  (void);
            const SFString            *getSFSofaSceneFile   (void) const;

                  SFBool              *editSFIgnoreSofaLights(void);
            const SFBool              *getSFIgnoreSofaLights (void) const;

                  SFBool              *editSFAnimate        (void);
            const SFBool              *getSFAnimate         (void) const;

                  SFBool              *editSFReset          (void);
            const SFBool              *getSFReset           (void) const;

                  SFUInt32            *editSFShadowMode     (void);
            const SFUInt32            *getSFShadowMode      (void) const;

                  SFMouseData         *editSFMouseData      (void);
            const SFMouseData         *getSFMouseData       (void) const;


                  Real32              &editRotationSpeed  (void);
                  Real32               getRotationSpeed   (void) const;

                  std::string         &editSofaSceneFile  (void);
            const std::string         &getSofaSceneFile   (void) const;

                  bool                &editIgnoreSofaLights(void);
                  bool                 getIgnoreSofaLights (void) const;

                  bool                &editAnimate        (void);
                  bool                 getAnimate         (void) const;

                  bool                &editReset          (void);
                  bool                 getReset           (void) const;

                  UInt32              &editShadowMode     (void);
                  UInt32               getShadowMode      (void) const;

                  MouseData           &editMouseData      (void);
            const MouseData           &getMouseData       (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setRotationSpeed  (const Real32 value);
            void setSofaSceneFile  (const std::string &value);
            void setIgnoreSofaLights(const bool value);
            void setAnimate        (const bool value);
            void setReset          (const bool value);
            void setShadowMode     (const UInt32 value);
            void setMouseData      (const MouseData &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual SizeT  getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  SofaItemTransitPtr  create          (void);
    static  SofaItem           *createEmpty     (void);

    static  SofaItemTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  SofaItem            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  SofaItemTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFReal32          _sfRotationSpeed;
    SFString          _sfSofaSceneFile;
    SFBool            _sfIgnoreSofaLights;
    SFBool            _sfAnimate;
    SFBool            _sfReset;
    SFUInt32          _sfShadowMode;
    SFMouseData       _sfMouseData;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    SofaItemBase(void);
    SofaItemBase(const SofaItemBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~SofaItemBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleRotationSpeed   (void) const;
    EditFieldHandlePtr editHandleRotationSpeed  (void);
    GetFieldHandlePtr  getHandleSofaSceneFile   (void) const;
    EditFieldHandlePtr editHandleSofaSceneFile  (void);
    GetFieldHandlePtr  getHandleIgnoreSofaLights (void) const;
    EditFieldHandlePtr editHandleIgnoreSofaLights(void);
    GetFieldHandlePtr  getHandleAnimate         (void) const;
    EditFieldHandlePtr editHandleAnimate        (void);
    GetFieldHandlePtr  getHandleReset           (void) const;
    EditFieldHandlePtr editHandleReset          (void);
    GetFieldHandlePtr  getHandleShadowMode      (void) const;
    EditFieldHandlePtr editHandleShadowMode     (void);
    GetFieldHandlePtr  getHandleMouseData       (void) const;
    EditFieldHandlePtr editHandleMouseData      (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      SofaItemBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const SofaItemBase &source);
};

typedef SofaItemBase *SofaItemBaseP;

VCORE_END_NAMESPACE

#endif /* _OSGSOFAITEMBASE_H_ */
