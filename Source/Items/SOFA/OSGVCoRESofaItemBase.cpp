/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SofaItem!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#include "OSGConfig.h"




#include "OSGVCoRESofaItemBase.h"
#include "OSGVCoRESofaItem.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

VCORE_IMPORT_NAMESPACE;

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::SofaItem
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Real32          SofaItemBase::_sfRotationSpeed
    
*/

/*! \var std::string     SofaItemBase::_sfSofaDataPath
    
*/

/*! \var std::string     SofaItemBase::_sfSofaSceneFile
    
*/

/*! \var bool            SofaItemBase::_sfIgnoreSofaLights
    
*/

/*! \var bool            SofaItemBase::_sfAnimate
    
*/

/*! \var bool            SofaItemBase::_sfReset
    
*/

/*! \var MouseData       SofaItemBase::_sfMouseData
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<SofaItem *, nsVCoRE>::_type(
    "SofaItemPtr", 
    "OSGTreeItemPtr", 
    SofaItem::getClassType(),
    nsVCoRE);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(SofaItem *, nsVCoRE)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           SofaItem *,
                           nsVCoRE);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           SofaItem *,
                           nsVCoRE);

OSG_END_NAMESPACE

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

VCORE_BEGIN_NAMESPACE

OSG_IMPORT_NAMESPACE;

void SofaItemBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "rotationSpeed",
        "",
        RotationSpeedFieldId, RotationSpeedFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SofaItem::editHandleRotationSpeed),
        static_cast<FieldGetMethodSig >(&SofaItem::getHandleRotationSpeed));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "sofaDataPath",
        "",
        SofaDataPathFieldId, SofaDataPathFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SofaItem::editHandleSofaDataPath),
        static_cast<FieldGetMethodSig >(&SofaItem::getHandleSofaDataPath));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "sofaSceneFile",
        "",
        SofaSceneFileFieldId, SofaSceneFileFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SofaItem::editHandleSofaSceneFile),
        static_cast<FieldGetMethodSig >(&SofaItem::getHandleSofaSceneFile));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "ignoreSofaLights",
        "",
        IgnoreSofaLightsFieldId, IgnoreSofaLightsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SofaItem::editHandleIgnoreSofaLights),
        static_cast<FieldGetMethodSig >(&SofaItem::getHandleIgnoreSofaLights));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "animate",
        "",
        AnimateFieldId, AnimateFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SofaItem::editHandleAnimate),
        static_cast<FieldGetMethodSig >(&SofaItem::getHandleAnimate));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "reset",
        "",
        ResetFieldId, ResetFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SofaItem::editHandleReset),
        static_cast<FieldGetMethodSig >(&SofaItem::getHandleReset));

    oType.addInitialDesc(pDesc);

    pDesc = new SFMouseData::Description(
        SFMouseData::getClassType(),
        "mouseData",
        "",
        MouseDataFieldId, MouseDataFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SofaItem::editHandleMouseData),
        static_cast<FieldGetMethodSig >(&SofaItem::getHandleMouseData));

    oType.addInitialDesc(pDesc);
}


SofaItemBase::TypeObject SofaItemBase::_type(
    SofaItemBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsVCoRE, //Namespace
    reinterpret_cast<PrototypeCreateF>(&SofaItemBase::createEmptyLocal),
    SofaItem::initMethod,
    SofaItem::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&SofaItem::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\" ?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"SofaItem\"\n"
    "    parent=\"OSGTreeItem\"\n"
    "    library=\"VCoREItemSofa\"\n"
    "    structure=\"concrete\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    isNodeCore=\"false\"\n"
    "    isBundle=\"true\"\n"
    "    docGroupBase=\"GrpVCoreSystem\"\n"
    "    libnamespace=\"VCoRE\"\n"
    "    >\n"
    "  <Field\n"
    "\t name=\"rotationSpeed\"\n"
    "\t type=\"Real32\"\n"
    "\t cardinality=\"single\"\n"
    "\t defaultValue=\"1.0f\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"sofaDataPath\"\n"
    "\t type=\"std::string\"\n"
    "\t cardinality=\"single\"\n"
    "\t defaultValue=\"\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"sofaSceneFile\"\n"
    "\t type=\"std::string\"\n"
    "\t cardinality=\"single\"\n"
    "\t defaultValue=\"\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"ignoreSofaLights\"\n"
    "\t type=\"bool\"\n"
    "\t cardinality=\"single\"\n"
    "\t defaultValue=\"false\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"animate\"\n"
    "\t type=\"bool\"\n"
    "\t cardinality=\"single\"\n"
    "\t defaultValue=\"false\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"reset\"\n"
    "\t type=\"bool\"\n"
    "\t cardinality=\"single\"\n"
    "\t defaultValue=\"false\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"mouseData\"\n"
    "     type=\"MouseData\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"internal\"\n"
    "     access=\"public\"\n"
    "     >\n"
    "  </Field>\n"
    "\n"
    "\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &SofaItemBase::getType(void)
{
    return _type;
}

const FieldContainerType &SofaItemBase::getType(void) const
{
    return _type;
}

UInt32 SofaItemBase::getContainerSize(void) const
{
    return sizeof(SofaItem);
}

/*------------------------- decorator get ------------------------------*/


SFReal32 *SofaItemBase::editSFRotationSpeed(void)
{
    editSField(RotationSpeedFieldMask);

    return &_sfRotationSpeed;
}

const SFReal32 *SofaItemBase::getSFRotationSpeed(void) const
{
    return &_sfRotationSpeed;
}


SFString *SofaItemBase::editSFSofaDataPath(void)
{
    editSField(SofaDataPathFieldMask);

    return &_sfSofaDataPath;
}

const SFString *SofaItemBase::getSFSofaDataPath(void) const
{
    return &_sfSofaDataPath;
}


SFString *SofaItemBase::editSFSofaSceneFile(void)
{
    editSField(SofaSceneFileFieldMask);

    return &_sfSofaSceneFile;
}

const SFString *SofaItemBase::getSFSofaSceneFile(void) const
{
    return &_sfSofaSceneFile;
}


SFBool *SofaItemBase::editSFIgnoreSofaLights(void)
{
    editSField(IgnoreSofaLightsFieldMask);

    return &_sfIgnoreSofaLights;
}

const SFBool *SofaItemBase::getSFIgnoreSofaLights(void) const
{
    return &_sfIgnoreSofaLights;
}


SFBool *SofaItemBase::editSFAnimate(void)
{
    editSField(AnimateFieldMask);

    return &_sfAnimate;
}

const SFBool *SofaItemBase::getSFAnimate(void) const
{
    return &_sfAnimate;
}


SFBool *SofaItemBase::editSFReset(void)
{
    editSField(ResetFieldMask);

    return &_sfReset;
}

const SFBool *SofaItemBase::getSFReset(void) const
{
    return &_sfReset;
}


SFMouseData *SofaItemBase::editSFMouseData(void)
{
    editSField(MouseDataFieldMask);

    return &_sfMouseData;
}

const SFMouseData *SofaItemBase::getSFMouseData(void) const
{
    return &_sfMouseData;
}






/*------------------------------ access -----------------------------------*/

SizeT SofaItemBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (RotationSpeedFieldMask & whichField))
    {
        returnValue += _sfRotationSpeed.getBinSize();
    }
    if(FieldBits::NoField != (SofaDataPathFieldMask & whichField))
    {
        returnValue += _sfSofaDataPath.getBinSize();
    }
    if(FieldBits::NoField != (SofaSceneFileFieldMask & whichField))
    {
        returnValue += _sfSofaSceneFile.getBinSize();
    }
    if(FieldBits::NoField != (IgnoreSofaLightsFieldMask & whichField))
    {
        returnValue += _sfIgnoreSofaLights.getBinSize();
    }
    if(FieldBits::NoField != (AnimateFieldMask & whichField))
    {
        returnValue += _sfAnimate.getBinSize();
    }
    if(FieldBits::NoField != (ResetFieldMask & whichField))
    {
        returnValue += _sfReset.getBinSize();
    }
    if(FieldBits::NoField != (MouseDataFieldMask & whichField))
    {
        returnValue += _sfMouseData.getBinSize();
    }

    return returnValue;
}

void SofaItemBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (RotationSpeedFieldMask & whichField))
    {
        _sfRotationSpeed.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SofaDataPathFieldMask & whichField))
    {
        _sfSofaDataPath.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SofaSceneFileFieldMask & whichField))
    {
        _sfSofaSceneFile.copyToBin(pMem);
    }
    if(FieldBits::NoField != (IgnoreSofaLightsFieldMask & whichField))
    {
        _sfIgnoreSofaLights.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AnimateFieldMask & whichField))
    {
        _sfAnimate.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ResetFieldMask & whichField))
    {
        _sfReset.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MouseDataFieldMask & whichField))
    {
        _sfMouseData.copyToBin(pMem);
    }
}

void SofaItemBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (RotationSpeedFieldMask & whichField))
    {
        editSField(RotationSpeedFieldMask);
        _sfRotationSpeed.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SofaDataPathFieldMask & whichField))
    {
        editSField(SofaDataPathFieldMask);
        _sfSofaDataPath.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SofaSceneFileFieldMask & whichField))
    {
        editSField(SofaSceneFileFieldMask);
        _sfSofaSceneFile.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (IgnoreSofaLightsFieldMask & whichField))
    {
        editSField(IgnoreSofaLightsFieldMask);
        _sfIgnoreSofaLights.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AnimateFieldMask & whichField))
    {
        editSField(AnimateFieldMask);
        _sfAnimate.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ResetFieldMask & whichField))
    {
        editSField(ResetFieldMask);
        _sfReset.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MouseDataFieldMask & whichField))
    {
        editSField(MouseDataFieldMask);
        _sfMouseData.copyFromBin(pMem);
    }
}

//! create a new instance of the class
SofaItemTransitPtr SofaItemBase::createLocal(BitVector bFlags)
{
    SofaItemTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<SofaItem>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
SofaItemTransitPtr SofaItemBase::createDependent(BitVector bFlags)
{
    SofaItemTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<SofaItem>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
SofaItemTransitPtr SofaItemBase::create(void)
{
    return createLocal();
}

SofaItem *SofaItemBase::createEmptyLocal(BitVector bFlags)
{
    SofaItem *returnValue;

    newPtr<SofaItem>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
SofaItem *SofaItemBase::createEmpty(void)
{
    return createEmptyLocal();
}


FieldContainerTransitPtr SofaItemBase::shallowCopyLocal(
    BitVector bFlags) const
{
    SofaItem *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SofaItem *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr SofaItemBase::shallowCopyDependent(
    BitVector bFlags) const
{
    SofaItem *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SofaItem *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr SofaItemBase::shallowCopy(void) const
{
    return shallowCopyLocal();
}




/*------------------------- constructors ----------------------------------*/

SofaItemBase::SofaItemBase(void) :
    Inherited(),
    _sfRotationSpeed          (Real32(1.0f)),
    _sfSofaDataPath           (),
    _sfSofaSceneFile          (),
    _sfIgnoreSofaLights       (bool(false)),
    _sfAnimate                (bool(false)),
    _sfReset                  (bool(false)),
    _sfMouseData              ()
{
}

SofaItemBase::SofaItemBase(const SofaItemBase &source) :
    Inherited(source),
    _sfRotationSpeed          (source._sfRotationSpeed          ),
    _sfSofaDataPath           (source._sfSofaDataPath           ),
    _sfSofaSceneFile          (source._sfSofaSceneFile          ),
    _sfIgnoreSofaLights       (source._sfIgnoreSofaLights       ),
    _sfAnimate                (source._sfAnimate                ),
    _sfReset                  (source._sfReset                  ),
    _sfMouseData              (source._sfMouseData              )
{
}


/*-------------------------- destructors ----------------------------------*/

SofaItemBase::~SofaItemBase(void)
{
}


GetFieldHandlePtr SofaItemBase::getHandleRotationSpeed   (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfRotationSpeed,
             this->getType().getFieldDesc(RotationSpeedFieldId),
             const_cast<SofaItemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SofaItemBase::editHandleRotationSpeed  (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfRotationSpeed,
             this->getType().getFieldDesc(RotationSpeedFieldId),
             this));


    editSField(RotationSpeedFieldMask);

    return returnValue;
}

GetFieldHandlePtr SofaItemBase::getHandleSofaDataPath    (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfSofaDataPath,
             this->getType().getFieldDesc(SofaDataPathFieldId),
             const_cast<SofaItemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SofaItemBase::editHandleSofaDataPath   (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfSofaDataPath,
             this->getType().getFieldDesc(SofaDataPathFieldId),
             this));


    editSField(SofaDataPathFieldMask);

    return returnValue;
}

GetFieldHandlePtr SofaItemBase::getHandleSofaSceneFile   (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfSofaSceneFile,
             this->getType().getFieldDesc(SofaSceneFileFieldId),
             const_cast<SofaItemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SofaItemBase::editHandleSofaSceneFile  (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfSofaSceneFile,
             this->getType().getFieldDesc(SofaSceneFileFieldId),
             this));


    editSField(SofaSceneFileFieldMask);

    return returnValue;
}

GetFieldHandlePtr SofaItemBase::getHandleIgnoreSofaLights (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfIgnoreSofaLights,
             this->getType().getFieldDesc(IgnoreSofaLightsFieldId),
             const_cast<SofaItemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SofaItemBase::editHandleIgnoreSofaLights(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfIgnoreSofaLights,
             this->getType().getFieldDesc(IgnoreSofaLightsFieldId),
             this));


    editSField(IgnoreSofaLightsFieldMask);

    return returnValue;
}

GetFieldHandlePtr SofaItemBase::getHandleAnimate         (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfAnimate,
             this->getType().getFieldDesc(AnimateFieldId),
             const_cast<SofaItemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SofaItemBase::editHandleAnimate        (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfAnimate,
             this->getType().getFieldDesc(AnimateFieldId),
             this));


    editSField(AnimateFieldMask);

    return returnValue;
}

GetFieldHandlePtr SofaItemBase::getHandleReset           (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfReset,
             this->getType().getFieldDesc(ResetFieldId),
             const_cast<SofaItemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SofaItemBase::editHandleReset          (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfReset,
             this->getType().getFieldDesc(ResetFieldId),
             this));


    editSField(ResetFieldMask);

    return returnValue;
}

GetFieldHandlePtr SofaItemBase::getHandleMouseData       (void) const
{
    SFMouseData::GetHandlePtr returnValue(
        new  SFMouseData::GetHandle(
             &_sfMouseData,
             this->getType().getFieldDesc(MouseDataFieldId),
             const_cast<SofaItemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SofaItemBase::editHandleMouseData      (void)
{
    SFMouseData::EditHandlePtr returnValue(
        new  SFMouseData::EditHandle(
             &_sfMouseData,
             this->getType().getFieldDesc(MouseDataFieldId),
             this));


    editSField(MouseDataFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void SofaItemBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    SofaItem *pThis = static_cast<SofaItem *>(this);

    pThis->execSync(static_cast<SofaItem *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *SofaItemBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    SofaItem *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const SofaItem *>(pRefAspect),
                  dynamic_cast<const SofaItem *>(this));

    return returnValue;
}
#endif

void SofaItemBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


VCORE_END_NAMESPACE
