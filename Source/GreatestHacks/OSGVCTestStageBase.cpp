/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class VCTestStage!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#include "OSGConfig.h"



#include "OSGCamera.h"                  // Camera Class
#include "OSGBackground.h"              // Background Class

#include "OSGVCTestStageBase.h"
#include "OSGVCTestStage.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::VCTestStage
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Camera *        VCTestStageBase::_sfCamera
    
*/

/*! \var Background *    VCTestStageBase::_sfBackground
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<VCTestStage *, nsOSG>::_type(
    "VCTestStagePtr", 
    "StagePtr", 
    VCTestStage::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(VCTestStage *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           VCTestStage *,
                           nsOSG);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           VCTestStage *,
                           nsOSG);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void VCTestStageBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecCameraPtr::Description(
        SFUnrecCameraPtr::getClassType(),
        "camera",
        "",
        CameraFieldId, CameraFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&VCTestStage::editHandleCamera),
        static_cast<FieldGetMethodSig >(&VCTestStage::getHandleCamera));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecBackgroundPtr::Description(
        SFUnrecBackgroundPtr::getClassType(),
        "background",
        "",
        BackgroundFieldId, BackgroundFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&VCTestStage::editHandleBackground),
        static_cast<FieldGetMethodSig >(&VCTestStage::getHandleBackground));

    oType.addInitialDesc(pDesc);
}


VCTestStageBase::TypeObject VCTestStageBase::_type(
    VCTestStageBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&VCTestStageBase::createEmptyLocal),
    VCTestStage::initMethod,
    VCTestStage::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&VCTestStage::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\" ?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"VCTestStage\"\n"
    "   parent=\"Stage\"\n"
    "   library=\"VCoreGreatestHacks\"\n"
    "   structure=\"concrete\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   isNodeCore=\"true\"\n"
    "   docGroupBase=\"GrpVCoreGreatestHacks\"\n"
    "   typeDescAddable=\"false\"\n"
    "   dynFCDerived=\"false\"\n"
    "   >\n"
    "  <Field\n"
    "     name=\"camera\"\n"
    "     type=\"CameraPtr\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     defaultValue=\"NULL\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"background\"\n"
    "     type=\"BackgroundPtr\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     defaultValue=\"NULL\"\n"
    "     >\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &VCTestStageBase::getType(void)
{
    return _type;
}

const FieldContainerType &VCTestStageBase::getType(void) const
{
    return _type;
}

UInt32 VCTestStageBase::getContainerSize(void) const
{
    return sizeof(VCTestStage);
}

/*------------------------- decorator get ------------------------------*/


//! Get the VCTestStage::_sfCamera field.
const SFUnrecCameraPtr *VCTestStageBase::getSFCamera(void) const
{
    return &_sfCamera;
}

SFUnrecCameraPtr    *VCTestStageBase::editSFCamera         (void)
{
    editSField(CameraFieldMask);

    return &_sfCamera;
}

//! Get the VCTestStage::_sfBackground field.
const SFUnrecBackgroundPtr *VCTestStageBase::getSFBackground(void) const
{
    return &_sfBackground;
}

SFUnrecBackgroundPtr *VCTestStageBase::editSFBackground     (void)
{
    editSField(BackgroundFieldMask);

    return &_sfBackground;
}





/*------------------------------ access -----------------------------------*/

UInt32 VCTestStageBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (CameraFieldMask & whichField))
    {
        returnValue += _sfCamera.getBinSize();
    }
    if(FieldBits::NoField != (BackgroundFieldMask & whichField))
    {
        returnValue += _sfBackground.getBinSize();
    }

    return returnValue;
}

void VCTestStageBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (CameraFieldMask & whichField))
    {
        _sfCamera.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BackgroundFieldMask & whichField))
    {
        _sfBackground.copyToBin(pMem);
    }
}

void VCTestStageBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (CameraFieldMask & whichField))
    {
        editSField(CameraFieldMask);
        _sfCamera.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BackgroundFieldMask & whichField))
    {
        editSField(BackgroundFieldMask);
        _sfBackground.copyFromBin(pMem);
    }
}

//! create a new instance of the class
VCTestStageTransitPtr VCTestStageBase::createLocal(BitVector bFlags)
{
    VCTestStageTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<VCTestStage>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
VCTestStageTransitPtr VCTestStageBase::createDependent(BitVector bFlags)
{
    VCTestStageTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<VCTestStage>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
VCTestStageTransitPtr VCTestStageBase::create(void)
{
    VCTestStageTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<VCTestStage>(tmpPtr);
    }

    return fc;
}

VCTestStage *VCTestStageBase::createEmptyLocal(BitVector bFlags)
{
    VCTestStage *returnValue;

    newPtr<VCTestStage>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
VCTestStage *VCTestStageBase::createEmpty(void)
{
    VCTestStage *returnValue;

    newPtr<VCTestStage>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr VCTestStageBase::shallowCopyLocal(
    BitVector bFlags) const
{
    VCTestStage *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const VCTestStage *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr VCTestStageBase::shallowCopyDependent(
    BitVector bFlags) const
{
    VCTestStage *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const VCTestStage *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr VCTestStageBase::shallowCopy(void) const
{
    VCTestStage *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const VCTestStage *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

VCTestStageBase::VCTestStageBase(void) :
    Inherited(),
    _sfCamera                 (NULL),
    _sfBackground             (NULL)
{
}

VCTestStageBase::VCTestStageBase(const VCTestStageBase &source) :
    Inherited(source),
    _sfCamera                 (NULL),
    _sfBackground             (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

VCTestStageBase::~VCTestStageBase(void)
{
}

void VCTestStageBase::onCreate(const VCTestStage *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        VCTestStage *pThis = static_cast<VCTestStage *>(this);

        pThis->setCamera(source->getCamera());

        pThis->setBackground(source->getBackground());
    }
}

GetFieldHandlePtr VCTestStageBase::getHandleCamera          (void) const
{
    SFUnrecCameraPtr::GetHandlePtr returnValue(
        new  SFUnrecCameraPtr::GetHandle(
             &_sfCamera,
             this->getType().getFieldDesc(CameraFieldId),
             const_cast<VCTestStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VCTestStageBase::editHandleCamera         (void)
{
    SFUnrecCameraPtr::EditHandlePtr returnValue(
        new  SFUnrecCameraPtr::EditHandle(
             &_sfCamera,
             this->getType().getFieldDesc(CameraFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&VCTestStage::setCamera,
                    static_cast<VCTestStage *>(this), _1));

    editSField(CameraFieldMask);

    return returnValue;
}

GetFieldHandlePtr VCTestStageBase::getHandleBackground      (void) const
{
    SFUnrecBackgroundPtr::GetHandlePtr returnValue(
        new  SFUnrecBackgroundPtr::GetHandle(
             &_sfBackground,
             this->getType().getFieldDesc(BackgroundFieldId),
             const_cast<VCTestStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VCTestStageBase::editHandleBackground     (void)
{
    SFUnrecBackgroundPtr::EditHandlePtr returnValue(
        new  SFUnrecBackgroundPtr::EditHandle(
             &_sfBackground,
             this->getType().getFieldDesc(BackgroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&VCTestStage::setBackground,
                    static_cast<VCTestStage *>(this), _1));

    editSField(BackgroundFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void VCTestStageBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    VCTestStage *pThis = static_cast<VCTestStage *>(this);

    pThis->execSync(static_cast<VCTestStage *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *VCTestStageBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    VCTestStage *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const VCTestStage *>(pRefAspect),
                  dynamic_cast<const VCTestStage *>(this));

    return returnValue;
}
#endif

void VCTestStageBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<VCTestStage *>(this)->setCamera(NULL);

    static_cast<VCTestStage *>(this)->setBackground(NULL);


}


OSG_END_NAMESPACE
