/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class VCoreWorker!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#include "OSGConfig.h"



#include "OSGVCoreArena.h"              // Parent Class
#include "OSGVCoreItem.h"               // Items Class

#include "OSGVCoreWorkerBase.h"
#include "OSGVCoreWorker.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::VCoreWorker
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var VCoreArena *    VCoreWorkerBase::_sfParent
    
*/

/*! \var VCoreItem *     VCoreWorkerBase::_mfItems
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<VCoreWorker *>::_type("VCoreWorkerPtr", "AttachmentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(VCoreWorker *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           VCoreWorker *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           VCoreWorker *,
                           0);

DataType &FieldTraits< VCoreWorker *, 1 >::getType(void)
{
    return FieldTraits<VCoreWorker *, 0>::getType();
}


OSG_EXPORT_PTR_SFIELD(ChildPointerSField,
                      VCoreWorker *,
                      UnrecordedRefCountPolicy,
                      1);


OSG_EXPORT_PTR_MFIELD(ChildPointerMField,
                      VCoreWorker *,
                      UnrecordedRefCountPolicy,
                      1);


/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void VCoreWorkerBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFParentVCoreArenaPtr::Description(
        SFParentVCoreArenaPtr::getClassType(),
        "parent",
        "",
        ParentFieldId, ParentFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast     <FieldEditMethodSig>(&VCoreWorker::invalidEditField),
        static_cast     <FieldGetMethodSig >(&VCoreWorker::invalidGetField));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecVCoreItemPtr::Description(
        MFUnrecVCoreItemPtr::getClassType(),
        "items",
        "",
        ItemsFieldId, ItemsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&VCoreWorker::editHandleItems),
        static_cast<FieldGetMethodSig >(&VCoreWorker::getHandleItems));

    oType.addInitialDesc(pDesc);
}


VCoreWorkerBase::TypeObject VCoreWorkerBase::_type(
    VCoreWorkerBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&VCoreWorkerBase::createEmptyLocal),
    VCoreWorker::initMethod,
    VCoreWorker::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&VCoreWorker::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\" ?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"VCoreWorker\"\n"
    "    parent=\"AttachmentContainer\"\n"
    "    library=\"VCoreSystem\"\n"
    "    structure=\"concrete\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    isNodeCore=\"false\"\n"
    "    isBundle=\"true\"\n"
    "    docGroupBase=\"GrpVCoreSystem\"\n"
    "    childFields=\"both\"\n"
    "    >\n"
    "  <Field\n"
    "      name=\"parent\"\n"
    "      type=\"VCoreArena\"\n"
    "      cardinality=\"single\"\n"
    "      visibility=\"internal\"\n"
    "      access=\"none\"\n"
    "      category=\"parentpointer\"\n"
    "      >\n"
    "  </Field>\n"
    "  <Field\n"
    "      name=\"items\"\n"
    "      type=\"VCoreItem\"\n"
    "      cardinality=\"multi\"\n"
    "      visibility=\"external\"\n"
    "      access=\"public\"\n"
    "      category=\"pointer\"\n"
    "      >\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &VCoreWorkerBase::getType(void)
{
    return _type;
}

const FieldContainerType &VCoreWorkerBase::getType(void) const
{
    return _type;
}

UInt32 VCoreWorkerBase::getContainerSize(void) const
{
    return sizeof(VCoreWorker);
}

/*------------------------- decorator get ------------------------------*/



//! Get the VCoreWorker::_mfItems field.
const MFUnrecVCoreItemPtr *VCoreWorkerBase::getMFItems(void) const
{
    return &_mfItems;
}

MFUnrecVCoreItemPtr *VCoreWorkerBase::editMFItems          (void)
{
    editMField(ItemsFieldMask, _mfItems);

    return &_mfItems;
}



void VCoreWorkerBase::pushToItems(VCoreItem * const value)
{
    editMField(ItemsFieldMask, _mfItems);

    _mfItems.push_back(value);
}

void VCoreWorkerBase::assignItems    (const MFUnrecVCoreItemPtr &value)
{
    MFUnrecVCoreItemPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecVCoreItemPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<VCoreWorker *>(this)->clearItems();

    while(elemIt != elemEnd)
    {
        this->pushToItems(*elemIt);

        ++elemIt;
    }
}

void VCoreWorkerBase::removeFromItems(UInt32 uiIndex)
{
    if(uiIndex < _mfItems.size())
    {
        editMField(ItemsFieldMask, _mfItems);

        _mfItems.erase(uiIndex);
    }
}

void VCoreWorkerBase::removeObjFromItems(VCoreItem * const value)
{
    Int32 iElemIdx = _mfItems.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ItemsFieldMask, _mfItems);

        _mfItems.erase(iElemIdx);
    }
}
void VCoreWorkerBase::clearItems(void)
{
    editMField(ItemsFieldMask, _mfItems);


    _mfItems.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 VCoreWorkerBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ParentFieldMask & whichField))
    {
        returnValue += _sfParent.getBinSize();
    }
    if(FieldBits::NoField != (ItemsFieldMask & whichField))
    {
        returnValue += _mfItems.getBinSize();
    }

    return returnValue;
}

void VCoreWorkerBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ParentFieldMask & whichField))
    {
        _sfParent.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ItemsFieldMask & whichField))
    {
        _mfItems.copyToBin(pMem);
    }
}

void VCoreWorkerBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ParentFieldMask & whichField))
    {
        editSField(ParentFieldMask);
        _sfParent.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ItemsFieldMask & whichField))
    {
        editMField(ItemsFieldMask, _mfItems);
        _mfItems.copyFromBin(pMem);
    }
}

//! create a new instance of the class
VCoreWorkerTransitPtr VCoreWorkerBase::createLocal(BitVector bFlags)
{
    VCoreWorkerTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<VCoreWorker>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
VCoreWorkerTransitPtr VCoreWorkerBase::createDependent(BitVector bFlags)
{
    VCoreWorkerTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<VCoreWorker>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
VCoreWorkerTransitPtr VCoreWorkerBase::create(void)
{
    return createLocal();
}

VCoreWorker *VCoreWorkerBase::createEmptyLocal(BitVector bFlags)
{
    VCoreWorker *returnValue;

    newPtr<VCoreWorker>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
VCoreWorker *VCoreWorkerBase::createEmpty(void)
{
    return createEmptyLocal();
}


FieldContainerTransitPtr VCoreWorkerBase::shallowCopyLocal(
    BitVector bFlags) const
{
    VCoreWorker *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const VCoreWorker *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr VCoreWorkerBase::shallowCopyDependent(
    BitVector bFlags) const
{
    VCoreWorker *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const VCoreWorker *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr VCoreWorkerBase::shallowCopy(void) const
{
    return shallowCopyLocal();
}




/*------------------------- constructors ----------------------------------*/

VCoreWorkerBase::VCoreWorkerBase(void) :
    Inherited(),
    _sfParent                 (NULL),
    _mfItems                  ()
{
}

VCoreWorkerBase::VCoreWorkerBase(const VCoreWorkerBase &source) :
    Inherited(source),
    _sfParent                 (NULL),
    _mfItems                  ()
{
}


/*-------------------------- destructors ----------------------------------*/

VCoreWorkerBase::~VCoreWorkerBase(void)
{
}
/*-------------------------------------------------------------------------*/
/* Parent linking                                                          */

bool VCoreWorkerBase::linkParent(
    FieldContainer * const pParent,
    UInt16           const childFieldId,
    UInt16           const parentFieldId )
{
    if(parentFieldId == ParentFieldId)
    {
        VCoreArena * pTypedParent =
            dynamic_cast< VCoreArena * >(pParent);

        if(pTypedParent != NULL)
        {
            FieldContainer *pOldParent =
                _sfParent.getValue         ();

            UInt16 oldChildFieldId =
                _sfParent.getParentFieldPos();

            if(pOldParent != NULL)
            {
                pOldParent->unlinkChild(this, oldChildFieldId);
            }

            editSField(ParentFieldMask);

            _sfParent.setValue(static_cast<VCoreArena *>(pParent), childFieldId);

            return true;
        }

        return false;
    }

    return Inherited::linkParent(pParent, childFieldId, parentFieldId);
}

bool VCoreWorkerBase::unlinkParent(
    FieldContainer * const pParent,
    UInt16           const parentFieldId)
{
    if(parentFieldId == ParentFieldId)
    {
        VCoreArena * pTypedParent =
            dynamic_cast< VCoreArena * >(pParent);

        if(pTypedParent != NULL)
        {
            if(_sfParent.getValue() == pTypedParent)
            {
                editSField(ParentFieldMask);

                _sfParent.setValue(NULL, 0xFFFF);

                return true;
            }

            SWARNING << "Child (["          << this
                     << "] id ["            << this->getId()
                     << "] type ["          << this->getType().getCName()
                     << "] parentFieldId [" << parentFieldId
                     << "]) - Parent (["    << pParent
                     << "] id ["            << pParent->getId()
                     << "] type ["          << pParent->getType().getCName()
                     << "]): link inconsistent!"
                     << std::endl;

            return false;
        }

        return false;
    }

    return Inherited::unlinkParent(pParent, parentFieldId);
}


void VCoreWorkerBase::onCreate(const VCoreWorker *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        VCoreWorker *pThis = static_cast<VCoreWorker *>(this);

        MFUnrecVCoreItemPtr::const_iterator ItemsIt  =
            source->_mfItems.begin();
        MFUnrecVCoreItemPtr::const_iterator ItemsEnd =
            source->_mfItems.end  ();

        while(ItemsIt != ItemsEnd)
        {
            pThis->pushToItems(*ItemsIt);

            ++ItemsIt;
        }
    }
}

GetFieldHandlePtr VCoreWorkerBase::getHandleParent          (void) const
{
    SFParentVCoreArenaPtr::GetHandlePtr returnValue;

    return returnValue;
}

EditFieldHandlePtr VCoreWorkerBase::editHandleParent         (void)
{
    EditFieldHandlePtr returnValue;

    return returnValue;
}

GetFieldHandlePtr VCoreWorkerBase::getHandleItems           (void) const
{
    MFUnrecVCoreItemPtr::GetHandlePtr returnValue(
        new  MFUnrecVCoreItemPtr::GetHandle(
             &_mfItems,
             this->getType().getFieldDesc(ItemsFieldId),
             const_cast<VCoreWorkerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VCoreWorkerBase::editHandleItems          (void)
{
    MFUnrecVCoreItemPtr::EditHandlePtr returnValue(
        new  MFUnrecVCoreItemPtr::EditHandle(
             &_mfItems,
             this->getType().getFieldDesc(ItemsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&VCoreWorker::pushToItems,
                    static_cast<VCoreWorker *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&VCoreWorker::removeFromItems,
                    static_cast<VCoreWorker *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&VCoreWorker::removeObjFromItems,
                    static_cast<VCoreWorker *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&VCoreWorker::clearItems,
                    static_cast<VCoreWorker *>(this)));

    editMField(ItemsFieldMask, _mfItems);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void VCoreWorkerBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    VCoreWorker *pThis = static_cast<VCoreWorker *>(this);

    pThis->execSync(static_cast<VCoreWorker *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *VCoreWorkerBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    VCoreWorker *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const VCoreWorker *>(pRefAspect),
                  dynamic_cast<const VCoreWorker *>(this));

    return returnValue;
}
#endif

void VCoreWorkerBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<VCoreWorker *>(this)->clearItems();


}


OSG_END_NAMESPACE
