/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class OSGSceneItem
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGOSGSCENEITEMBASE_H_
#define _OSGOSGSCENEITEMBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGVCoRESystemDef.h"

//#include "OSGBaseTypes.h"

#include "OSGVCoREItem.h" // Parent

#include "OSGBaseFields.h"              // Url type
#include "OSGNodeFields.h"              // Root type
#include "OSGFieldContainerFields.h"    // Globals type
#include "OSGCameraFields.h"            // Camera type

#include "OSGVCoREOSGSceneItemFields.h"

VCORE_BEGIN_NAMESPACE

OSG_IMPORT_NAMESPACE;

class OSGSceneItem;

//! \brief OSGSceneItem Base Class.

class OSG_VCORESYSTEM_DLLMAPPING OSGSceneItemBase : public Item
{
  public:

    typedef Item Inherited;
    typedef Item ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(OSGSceneItem);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        UrlFieldId = Inherited::NextFieldId,
        MatchedUrlFieldId = UrlFieldId + 1,
        RootFieldId = MatchedUrlFieldId + 1,
        GlobalsFieldId = RootFieldId + 1,
        GlobalUrlFieldId = GlobalsFieldId + 1,
        MatchedGlobalUrlFieldId = GlobalUrlFieldId + 1,
        CameraFieldId = MatchedGlobalUrlFieldId + 1,
        ActiveCameraFieldId = CameraFieldId + 1,
        NextFieldId = ActiveCameraFieldId + 1
    };

    static const OSG::BitVector UrlFieldMask =
        (TypeTraits<BitVector>::One << UrlFieldId);
    static const OSG::BitVector MatchedUrlFieldMask =
        (TypeTraits<BitVector>::One << MatchedUrlFieldId);
    static const OSG::BitVector RootFieldMask =
        (TypeTraits<BitVector>::One << RootFieldId);
    static const OSG::BitVector GlobalsFieldMask =
        (TypeTraits<BitVector>::One << GlobalsFieldId);
    static const OSG::BitVector GlobalUrlFieldMask =
        (TypeTraits<BitVector>::One << GlobalUrlFieldId);
    static const OSG::BitVector MatchedGlobalUrlFieldMask =
        (TypeTraits<BitVector>::One << MatchedGlobalUrlFieldId);
    static const OSG::BitVector CameraFieldMask =
        (TypeTraits<BitVector>::One << CameraFieldId);
    static const OSG::BitVector ActiveCameraFieldMask =
        (TypeTraits<BitVector>::One << ActiveCameraFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef MFString          MFUrlType;
    typedef SFString          SFMatchedUrlType;
    typedef SFUnrecNodePtr    SFRootType;
    typedef MFRecFieldContainerPtr MFGlobalsType;
    typedef MFString          MFGlobalUrlType;
    typedef SFString          SFMatchedGlobalUrlType;
    typedef SFUnrecCameraPtr  SFCameraType;
    typedef SFString          SFActiveCameraType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  MFString            *editMFUrl            (void);
            const MFString            *getMFUrl             (void) const;

                  SFString            *editSFMatchedUrl     (void);
            const SFString            *getSFMatchedUrl      (void) const;
            const SFUnrecNodePtr      *getSFRoot           (void) const;
                  SFUnrecNodePtr      *editSFRoot           (void);
            const MFRecFieldContainerPtr *getMFGlobals        (void) const;
                  MFRecFieldContainerPtr *editMFGlobals        (void);

                  MFString            *editMFGlobalUrl      (void);
            const MFString            *getMFGlobalUrl       (void) const;

                  SFString            *editSFMatchedGlobalUrl(void);
            const SFString            *getSFMatchedGlobalUrl (void) const;
            const SFUnrecCameraPtr    *getSFCamera         (void) const;
                  SFUnrecCameraPtr    *editSFCamera         (void);

                  SFString            *editSFActiveCamera   (void);
            const SFString            *getSFActiveCamera    (void) const;


                  std::string         &editUrl            (const UInt32 index);
            const std::string         &getUrl             (const UInt32 index) const;

                  std::string         &editMatchedUrl     (void);
            const std::string         &getMatchedUrl      (void) const;

                  Node * getRoot           (void) const;

                  FieldContainer * getGlobals        (const UInt32 index) const;

                  std::string         &editGlobalUrl      (const UInt32 index);
            const std::string         &getGlobalUrl       (const UInt32 index) const;

                  std::string         &editMatchedGlobalUrl(void);
            const std::string         &getMatchedGlobalUrl (void) const;

                  Camera * getCamera         (void) const;

                  std::string         &editActiveCamera   (void);
            const std::string         &getActiveCamera    (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setMatchedUrl     (const std::string &value);
            void setRoot           (Node * const value);
            void setMatchedGlobalUrl(const std::string &value);
            void setCamera         (Camera * const value);
            void setActiveCamera   (const std::string &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    void pushToGlobals             (FieldContainer * const value   );
    void assignGlobals            (const MFRecFieldContainerPtr &value);
    void removeFromGlobals (UInt32               uiIndex );
    void removeObjFromGlobals(FieldContainer * const value   );
    void clearGlobals               (void                         );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual SizeT  getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  OSGSceneItemTransitPtr  create          (void);
    static  OSGSceneItem           *createEmpty     (void);

    static  OSGSceneItemTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  OSGSceneItem            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  OSGSceneItemTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    MFString          _mfUrl;
    SFString          _sfMatchedUrl;
    SFUnrecNodePtr    _sfRoot;
    MFRecFieldContainerPtr _mfGlobals;
    MFString          _mfGlobalUrl;
    SFString          _sfMatchedGlobalUrl;
    SFUnrecCameraPtr  _sfCamera;
    SFString          _sfActiveCamera;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    OSGSceneItemBase(void);
    OSGSceneItemBase(const OSGSceneItemBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~OSGSceneItemBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const OSGSceneItem *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleUrl             (void) const;
    EditFieldHandlePtr editHandleUrl            (void);
    GetFieldHandlePtr  getHandleMatchedUrl      (void) const;
    EditFieldHandlePtr editHandleMatchedUrl     (void);
    GetFieldHandlePtr  getHandleRoot            (void) const;
    EditFieldHandlePtr editHandleRoot           (void);
    GetFieldHandlePtr  getHandleGlobals         (void) const;
    EditFieldHandlePtr editHandleGlobals        (void);
    GetFieldHandlePtr  getHandleGlobalUrl       (void) const;
    EditFieldHandlePtr editHandleGlobalUrl      (void);
    GetFieldHandlePtr  getHandleMatchedGlobalUrl (void) const;
    EditFieldHandlePtr editHandleMatchedGlobalUrl(void);
    GetFieldHandlePtr  getHandleCamera          (void) const;
    EditFieldHandlePtr editHandleCamera         (void);
    GetFieldHandlePtr  getHandleActiveCamera    (void) const;
    EditFieldHandlePtr editHandleActiveCamera   (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      OSGSceneItemBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const OSGSceneItemBase &source);
};

typedef OSGSceneItemBase *OSGSceneItemBaseP;

VCORE_END_NAMESPACE

#endif /* _OSGOSGSCENEITEMBASE_H_ */
