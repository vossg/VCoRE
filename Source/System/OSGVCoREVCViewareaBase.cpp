/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class VCViewarea!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#include "OSGConfig.h"



#include "OSGNode.h"                    // Root Class
#include "OSGVCoRERendererItem.h"       // Renderer Class
#include "OSGCamera.h"                  // Camera Class

#include "OSGVCoREVCViewareaBase.h"
#include "OSGVCoREVCViewarea.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

VCORE_IMPORT_NAMESPACE;

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::VCViewarea
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var std::string     VCViewareaBase::_sfRendererRef
    
*/

/*! \var std::string     VCViewareaBase::_sfRootRef
    
*/

/*! \var std::string     VCViewareaBase::_sfCameraRef
    
*/

/*! \var Node *          VCViewareaBase::_sfRoot
    
*/

/*! \var RendererItem *  VCViewareaBase::_sfRenderer
    
*/

/*! \var Camera *        VCViewareaBase::_sfCamera
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<VCViewarea *, nsVCoRE>::_type(
    "VCViewareaPtr", 
    "AttachmentContainerPtr", 
    VCViewarea::getClassType(),
    nsVCoRE);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(VCViewarea *, nsVCoRE)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           VCViewarea *,
                           nsVCoRE);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           VCViewarea *,
                           nsVCoRE);

OSG_END_NAMESPACE

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

VCORE_BEGIN_NAMESPACE

OSG_IMPORT_NAMESPACE;

void VCViewareaBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFString::Description(
        SFString::getClassType(),
        "rendererRef",
        "",
        RendererRefFieldId, RendererRefFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&VCViewarea::editHandleRendererRef),
        static_cast<FieldGetMethodSig >(&VCViewarea::getHandleRendererRef));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "rootRef",
        "",
        RootRefFieldId, RootRefFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&VCViewarea::editHandleRootRef),
        static_cast<FieldGetMethodSig >(&VCViewarea::getHandleRootRef));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "cameraRef",
        "",
        CameraRefFieldId, CameraRefFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&VCViewarea::editHandleCameraRef),
        static_cast<FieldGetMethodSig >(&VCViewarea::getHandleCameraRef));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecNodePtr::Description(
        SFUnrecNodePtr::getClassType(),
        "root",
        "",
        RootFieldId, RootFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&VCViewarea::editHandleRoot),
        static_cast<FieldGetMethodSig >(&VCViewarea::getHandleRoot));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecRendererItemPtr::Description(
        SFUnrecRendererItemPtr::getClassType(),
        "renderer",
        "",
        RendererFieldId, RendererFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&VCViewarea::editHandleRenderer),
        static_cast<FieldGetMethodSig >(&VCViewarea::getHandleRenderer));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecCameraPtr::Description(
        SFUnrecCameraPtr::getClassType(),
        "camera",
        "",
        CameraFieldId, CameraFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&VCViewarea::editHandleCamera),
        static_cast<FieldGetMethodSig >(&VCViewarea::getHandleCamera));

    oType.addInitialDesc(pDesc);
}


VCViewareaBase::TypeObject VCViewareaBase::_type(
    VCViewareaBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsVCoRE, //Namespace
    reinterpret_cast<PrototypeCreateF>(&VCViewareaBase::createEmptyLocal),
    VCViewarea::initMethod,
    VCViewarea::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&VCViewarea::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\" ?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"VCViewarea\"\n"
    "    parent=\"AttachmentContainer\"\n"
    "    parentnamespace=\"OSG\"\n"
    "    library=\"VCoRESystem\"\n"
    "    structure=\"concrete\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    isNodeCore=\"false\"\n"
    "    isBundle=\"true\"\n"
    "    docGroupBase=\"GrpVCoreSystem\"\n"
    "    libnamespace=\"VCoRE\"\n"
    "   >\n"
    "  <Field\n"
    "      name=\"rendererRef\"\n"
    "      type=\"std::string\"\n"
    "      cardinality=\"single\"\n"
    "      visibility=\"external\"\n"
    "      access=\"public\"\n"
    "      >\n"
    "  </Field>\n"
    "  <Field\n"
    "      name=\"rootRef\"\n"
    "      type=\"std::string\"\n"
    "      cardinality=\"single\"\n"
    "      visibility=\"external\"\n"
    "      access=\"public\"\n"
    "      >\n"
    "  </Field>\n"
    "  <Field\n"
    "      name=\"cameraRef\"\n"
    "      type=\"std::string\"\n"
    "      cardinality=\"single\"\n"
    "      visibility=\"external\"\n"
    "      access=\"public\"\n"
    "      >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"root\"\n"
    "\t type=\"Node\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"internal\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "     category=\"pointer\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"renderer\"\n"
    "\t type=\"VCoRE::RendererItem\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"internal\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "     category=\"pointer\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"camera\"\n"
    "\t type=\"Camera\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"internal\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "     category=\"pointer\"\n"
    "\t >\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &VCViewareaBase::getType(void)
{
    return _type;
}

const FieldContainerType &VCViewareaBase::getType(void) const
{
    return _type;
}

UInt32 VCViewareaBase::getContainerSize(void) const
{
    return sizeof(VCViewarea);
}

/*------------------------- decorator get ------------------------------*/


SFString *VCViewareaBase::editSFRendererRef(void)
{
    editSField(RendererRefFieldMask);

    return &_sfRendererRef;
}

const SFString *VCViewareaBase::getSFRendererRef(void) const
{
    return &_sfRendererRef;
}


SFString *VCViewareaBase::editSFRootRef(void)
{
    editSField(RootRefFieldMask);

    return &_sfRootRef;
}

const SFString *VCViewareaBase::getSFRootRef(void) const
{
    return &_sfRootRef;
}


SFString *VCViewareaBase::editSFCameraRef(void)
{
    editSField(CameraRefFieldMask);

    return &_sfCameraRef;
}

const SFString *VCViewareaBase::getSFCameraRef(void) const
{
    return &_sfCameraRef;
}


//! Get the VCViewarea::_sfRoot field.
const SFUnrecNodePtr *VCViewareaBase::getSFRoot(void) const
{
    return &_sfRoot;
}

SFUnrecNodePtr      *VCViewareaBase::editSFRoot           (void)
{
    editSField(RootFieldMask);

    return &_sfRoot;
}

//! Get the value of the VCViewarea::_sfRoot field.
Node * VCViewareaBase::getRoot(void) const
{
    return _sfRoot.getValue();
}

//! Set the value of the VCViewarea::_sfRoot field.
void VCViewareaBase::setRoot(Node * const value)
{
    editSField(RootFieldMask);

    _sfRoot.setValue(value);
}


//! Get the VCViewarea::_sfRenderer field.
const SFUnrecRendererItemPtr *VCViewareaBase::getSFRenderer(void) const
{
    return &_sfRenderer;
}

SFUnrecRendererItemPtr *VCViewareaBase::editSFRenderer       (void)
{
    editSField(RendererFieldMask);

    return &_sfRenderer;
}

//! Get the value of the VCViewarea::_sfRenderer field.
RendererItem * VCViewareaBase::getRenderer(void) const
{
    return _sfRenderer.getValue();
}

//! Set the value of the VCViewarea::_sfRenderer field.
void VCViewareaBase::setRenderer(RendererItem * const value)
{
    editSField(RendererFieldMask);

    _sfRenderer.setValue(value);
}


//! Get the VCViewarea::_sfCamera field.
const SFUnrecCameraPtr *VCViewareaBase::getSFCamera(void) const
{
    return &_sfCamera;
}

SFUnrecCameraPtr    *VCViewareaBase::editSFCamera         (void)
{
    editSField(CameraFieldMask);

    return &_sfCamera;
}

//! Get the value of the VCViewarea::_sfCamera field.
Camera * VCViewareaBase::getCamera(void) const
{
    return _sfCamera.getValue();
}

//! Set the value of the VCViewarea::_sfCamera field.
void VCViewareaBase::setCamera(Camera * const value)
{
    editSField(CameraFieldMask);

    _sfCamera.setValue(value);
}






/*------------------------------ access -----------------------------------*/

SizeT VCViewareaBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (RendererRefFieldMask & whichField))
    {
        returnValue += _sfRendererRef.getBinSize();
    }
    if(FieldBits::NoField != (RootRefFieldMask & whichField))
    {
        returnValue += _sfRootRef.getBinSize();
    }
    if(FieldBits::NoField != (CameraRefFieldMask & whichField))
    {
        returnValue += _sfCameraRef.getBinSize();
    }
    if(FieldBits::NoField != (RootFieldMask & whichField))
    {
        returnValue += _sfRoot.getBinSize();
    }
    if(FieldBits::NoField != (RendererFieldMask & whichField))
    {
        returnValue += _sfRenderer.getBinSize();
    }
    if(FieldBits::NoField != (CameraFieldMask & whichField))
    {
        returnValue += _sfCamera.getBinSize();
    }

    return returnValue;
}

void VCViewareaBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (RendererRefFieldMask & whichField))
    {
        _sfRendererRef.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RootRefFieldMask & whichField))
    {
        _sfRootRef.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CameraRefFieldMask & whichField))
    {
        _sfCameraRef.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RootFieldMask & whichField))
    {
        _sfRoot.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RendererFieldMask & whichField))
    {
        _sfRenderer.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CameraFieldMask & whichField))
    {
        _sfCamera.copyToBin(pMem);
    }
}

void VCViewareaBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (RendererRefFieldMask & whichField))
    {
        editSField(RendererRefFieldMask);
        _sfRendererRef.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RootRefFieldMask & whichField))
    {
        editSField(RootRefFieldMask);
        _sfRootRef.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CameraRefFieldMask & whichField))
    {
        editSField(CameraRefFieldMask);
        _sfCameraRef.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RootFieldMask & whichField))
    {
        editSField(RootFieldMask);
        _sfRoot.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RendererFieldMask & whichField))
    {
        editSField(RendererFieldMask);
        _sfRenderer.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CameraFieldMask & whichField))
    {
        editSField(CameraFieldMask);
        _sfCamera.copyFromBin(pMem);
    }
}

//! create a new instance of the class
VCViewareaTransitPtr VCViewareaBase::createLocal(BitVector bFlags)
{
    VCViewareaTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<VCViewarea>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
VCViewareaTransitPtr VCViewareaBase::createDependent(BitVector bFlags)
{
    VCViewareaTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<VCViewarea>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
VCViewareaTransitPtr VCViewareaBase::create(void)
{
    return createLocal();
}

VCViewarea *VCViewareaBase::createEmptyLocal(BitVector bFlags)
{
    VCViewarea *returnValue;

    newPtr<VCViewarea>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
VCViewarea *VCViewareaBase::createEmpty(void)
{
    return createEmptyLocal();
}


FieldContainerTransitPtr VCViewareaBase::shallowCopyLocal(
    BitVector bFlags) const
{
    VCViewarea *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const VCViewarea *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr VCViewareaBase::shallowCopyDependent(
    BitVector bFlags) const
{
    VCViewarea *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const VCViewarea *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr VCViewareaBase::shallowCopy(void) const
{
    return shallowCopyLocal();
}




/*------------------------- constructors ----------------------------------*/

VCViewareaBase::VCViewareaBase(void) :
    Inherited(),
    _sfRendererRef            (),
    _sfRootRef                (),
    _sfCameraRef              (),
    _sfRoot                   (NULL),
    _sfRenderer               (NULL),
    _sfCamera                 (NULL)
{
}

VCViewareaBase::VCViewareaBase(const VCViewareaBase &source) :
    Inherited(source),
    _sfRendererRef            (source._sfRendererRef            ),
    _sfRootRef                (source._sfRootRef                ),
    _sfCameraRef              (source._sfCameraRef              ),
    _sfRoot                   (NULL),
    _sfRenderer               (NULL),
    _sfCamera                 (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

VCViewareaBase::~VCViewareaBase(void)
{
}

void VCViewareaBase::onCreate(const VCViewarea *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        VCViewarea *pThis = static_cast<VCViewarea *>(this);

        pThis->setRoot(source->getRoot());

        pThis->setRenderer(source->getRenderer());

        pThis->setCamera(source->getCamera());
    }
}

GetFieldHandlePtr VCViewareaBase::getHandleRendererRef     (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfRendererRef,
             this->getType().getFieldDesc(RendererRefFieldId),
             const_cast<VCViewareaBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VCViewareaBase::editHandleRendererRef    (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfRendererRef,
             this->getType().getFieldDesc(RendererRefFieldId),
             this));


    editSField(RendererRefFieldMask);

    return returnValue;
}

GetFieldHandlePtr VCViewareaBase::getHandleRootRef         (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfRootRef,
             this->getType().getFieldDesc(RootRefFieldId),
             const_cast<VCViewareaBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VCViewareaBase::editHandleRootRef        (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfRootRef,
             this->getType().getFieldDesc(RootRefFieldId),
             this));


    editSField(RootRefFieldMask);

    return returnValue;
}

GetFieldHandlePtr VCViewareaBase::getHandleCameraRef       (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfCameraRef,
             this->getType().getFieldDesc(CameraRefFieldId),
             const_cast<VCViewareaBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VCViewareaBase::editHandleCameraRef      (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfCameraRef,
             this->getType().getFieldDesc(CameraRefFieldId),
             this));


    editSField(CameraRefFieldMask);

    return returnValue;
}

GetFieldHandlePtr VCViewareaBase::getHandleRoot            (void) const
{
    SFUnrecNodePtr::GetHandlePtr returnValue(
        new  SFUnrecNodePtr::GetHandle(
             &_sfRoot,
             this->getType().getFieldDesc(RootFieldId),
             const_cast<VCViewareaBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VCViewareaBase::editHandleRoot           (void)
{
    SFUnrecNodePtr::EditHandlePtr returnValue(
        new  SFUnrecNodePtr::EditHandle(
             &_sfRoot,
             this->getType().getFieldDesc(RootFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&VCViewarea::setRoot,
                    static_cast<VCViewarea *>(this), _1));

    editSField(RootFieldMask);

    return returnValue;
}

GetFieldHandlePtr VCViewareaBase::getHandleRenderer        (void) const
{
    SFUnrecRendererItemPtr::GetHandlePtr returnValue(
        new  SFUnrecRendererItemPtr::GetHandle(
             &_sfRenderer,
             this->getType().getFieldDesc(RendererFieldId),
             const_cast<VCViewareaBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VCViewareaBase::editHandleRenderer       (void)
{
    SFUnrecRendererItemPtr::EditHandlePtr returnValue(
        new  SFUnrecRendererItemPtr::EditHandle(
             &_sfRenderer,
             this->getType().getFieldDesc(RendererFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&VCViewarea::setRenderer,
                    static_cast<VCViewarea *>(this), _1));

    editSField(RendererFieldMask);

    return returnValue;
}

GetFieldHandlePtr VCViewareaBase::getHandleCamera          (void) const
{
    SFUnrecCameraPtr::GetHandlePtr returnValue(
        new  SFUnrecCameraPtr::GetHandle(
             &_sfCamera,
             this->getType().getFieldDesc(CameraFieldId),
             const_cast<VCViewareaBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VCViewareaBase::editHandleCamera         (void)
{
    SFUnrecCameraPtr::EditHandlePtr returnValue(
        new  SFUnrecCameraPtr::EditHandle(
             &_sfCamera,
             this->getType().getFieldDesc(CameraFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&VCViewarea::setCamera,
                    static_cast<VCViewarea *>(this), _1));

    editSField(CameraFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void VCViewareaBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    VCViewarea *pThis = static_cast<VCViewarea *>(this);

    pThis->execSync(static_cast<VCViewarea *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *VCViewareaBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    VCViewarea *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const VCViewarea *>(pRefAspect),
                  dynamic_cast<const VCViewarea *>(this));

    return returnValue;
}
#endif

void VCViewareaBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<VCViewarea *>(this)->setRoot(NULL);

    static_cast<VCViewarea *>(this)->setRenderer(NULL);

    static_cast<VCViewarea *>(this)->setCamera(NULL);


}


VCORE_END_NAMESPACE
