/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Arena!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#include "OSGConfig.h"



#include "OSGVCoREWorker.h"             // Worker Class
#include "OSGVCoREItem.h"               // Items Class

#include "OSGVCoREArenaBase.h"
#include "OSGVCoREArena.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

VCORE_IMPORT_NAMESPACE;

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::Arena
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Worker *        ArenaBase::_mfWorker
    
*/

/*! \var Item *          ArenaBase::_mfItems
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<Arena *, nsVCoRE>::_type(
    "ArenaPtr", 
    "AttachmentContainerPtr", 
    Arena::getClassType(),
    nsVCoRE);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(Arena *, nsVCoRE)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           Arena *,
                           nsVCoRE);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           Arena *,
                           nsVCoRE);

DataType &FieldTraits<Arena *, nsVCoRE + 1 >::getType(void)
{
    return FieldTraits<Arena *, nsVCoRE>::getType();
}


OSG_SFIELDTYPE_INST(ParentPointerSField,
                    Arena *,
                    NoRefCountPolicy,
                    nsVCoRE + 1);

OSG_FIELD_DLLEXPORT_DEF3(ParentPointerSField,
                         Arena *,
                         NoRefCountPolicy,
                         nsVCoRE + 1);


OSG_END_NAMESPACE

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

VCORE_BEGIN_NAMESPACE

OSG_IMPORT_NAMESPACE;

void ArenaBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUnrecChildWorkerPtr::Description(
        MFUnrecChildWorkerPtr::getClassType(),
        "worker",
        "",
        WorkerFieldId, WorkerFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Arena::editHandleWorker),
        static_cast<FieldGetMethodSig >(&Arena::getHandleWorker));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecChildItemPtr::Description(
        MFUnrecChildItemPtr::getClassType(),
        "items",
        "",
        ItemsFieldId, ItemsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Arena::editHandleItems),
        static_cast<FieldGetMethodSig >(&Arena::getHandleItems));

    oType.addInitialDesc(pDesc);
}


ArenaBase::TypeObject ArenaBase::_type(
    ArenaBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsVCoRE, //Namespace
    reinterpret_cast<PrototypeCreateF>(&ArenaBase::createEmptyLocal),
    Arena::initMethod,
    Arena::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&Arena::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\" ?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"Arena\"\n"
    "    parent=\"AttachmentContainer\"\n"
    "    parentnamespace=\"OSG\"\n"
    "    library=\"VCoRESystem\"\n"
    "    structure=\"concrete\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    isNodeCore=\"false\"\n"
    "    isBundle=\"true\"\n"
    "    docGroupBase=\"GrpVCoreSystem\"\n"
    "    parentFields=\"single\"\n"
    "    libnamespace=\"VCoRE\"\n"
    "   >\n"
    "  <Field\n"
    "      name=\"worker\"\n"
    "      type=\"VCoRE::Worker\"\n"
    "      cardinality=\"multi\"\n"
    "      visibility=\"external\"\n"
    "      access=\"public\"\n"
    "      category=\"childpointer\"\n"
    "      childParentType=\"Arena\"\n"
    "      linkParentField=\"Parent\"\n"
    "      >\n"
    "  </Field>\n"
    "  <Field\n"
    "      name=\"items\"\n"
    "      type=\"VCoRE::Item\"\n"
    "      cardinality=\"multi\"\n"
    "      visibility=\"external\"\n"
    "      access=\"public\"\n"
    "      category=\"childpointer\"\n"
    "      childParentType=\"FieldContainer\"\n"
    "      linkParentField=\"Parent\"\n"
    "      >\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ArenaBase::getType(void)
{
    return _type;
}

const FieldContainerType &ArenaBase::getType(void) const
{
    return _type;
}

UInt32 ArenaBase::getContainerSize(void) const
{
    return sizeof(Arena);
}

/*------------------------- decorator get ------------------------------*/


//! Get the Arena::_mfWorker field.
const MFUnrecChildWorkerPtr *ArenaBase::getMFWorker(void) const
{
    return &_mfWorker;
}

MFUnrecChildWorkerPtr *ArenaBase::editMFWorker         (void)
{
    editMField(WorkerFieldMask, _mfWorker);

    return &_mfWorker;
}
Worker * ArenaBase::getWorker(const UInt32 index) const
{
    return _mfWorker[index];
}

//! Get the Arena::_mfItems field.
const MFUnrecChildItemPtr *ArenaBase::getMFItems(void) const
{
    return &_mfItems;
}

MFUnrecChildItemPtr *ArenaBase::editMFItems          (void)
{
    editMField(ItemsFieldMask, _mfItems);

    return &_mfItems;
}
Item * ArenaBase::getItems(const UInt32 index) const
{
    return _mfItems[index];
}



void ArenaBase::pushToWorker(Worker * const value)
{
    editMField(WorkerFieldMask, _mfWorker);

    _mfWorker.push_back(value);
}

void ArenaBase::assignWorker   (const MFUnrecChildWorkerPtr &value)
{
    MFUnrecChildWorkerPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecChildWorkerPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<Arena *>(this)->clearWorker();

    while(elemIt != elemEnd)
    {
        this->pushToWorker(*elemIt);

        ++elemIt;
    }
}

void ArenaBase::removeFromWorker(UInt32 uiIndex)
{
    if(uiIndex < _mfWorker.size())
    {
        editMField(WorkerFieldMask, _mfWorker);

        _mfWorker.erase(uiIndex);
    }
}

void ArenaBase::removeObjFromWorker(Worker * const value)
{
    Int32 iElemIdx = _mfWorker.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(WorkerFieldMask, _mfWorker);

        _mfWorker.erase(iElemIdx);
    }
}
void ArenaBase::clearWorker(void)
{
    editMField(WorkerFieldMask, _mfWorker);


    _mfWorker.clear();
}

void ArenaBase::pushToItems(Item * const value)
{
    editMField(ItemsFieldMask, _mfItems);

    _mfItems.push_back(value);
}

void ArenaBase::assignItems    (const MFUnrecChildItemPtr &value)
{
    MFUnrecChildItemPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecChildItemPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<Arena *>(this)->clearItems();

    while(elemIt != elemEnd)
    {
        this->pushToItems(*elemIt);

        ++elemIt;
    }
}

void ArenaBase::removeFromItems(UInt32 uiIndex)
{
    if(uiIndex < _mfItems.size())
    {
        editMField(ItemsFieldMask, _mfItems);

        _mfItems.erase(uiIndex);
    }
}

void ArenaBase::removeObjFromItems(Item * const value)
{
    Int32 iElemIdx = _mfItems.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ItemsFieldMask, _mfItems);

        _mfItems.erase(iElemIdx);
    }
}
void ArenaBase::clearItems(void)
{
    editMField(ItemsFieldMask, _mfItems);


    _mfItems.clear();
}



/*------------------------------ access -----------------------------------*/

SizeT ArenaBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (WorkerFieldMask & whichField))
    {
        returnValue += _mfWorker.getBinSize();
    }
    if(FieldBits::NoField != (ItemsFieldMask & whichField))
    {
        returnValue += _mfItems.getBinSize();
    }

    return returnValue;
}

void ArenaBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (WorkerFieldMask & whichField))
    {
        _mfWorker.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ItemsFieldMask & whichField))
    {
        _mfItems.copyToBin(pMem);
    }
}

void ArenaBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (WorkerFieldMask & whichField))
    {
        editMField(WorkerFieldMask, _mfWorker);
        _mfWorker.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ItemsFieldMask & whichField))
    {
        editMField(ItemsFieldMask, _mfItems);
        _mfItems.copyFromBin(pMem);
    }
}

//! create a new instance of the class
ArenaTransitPtr ArenaBase::createLocal(BitVector bFlags)
{
    ArenaTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<Arena>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
ArenaTransitPtr ArenaBase::createDependent(BitVector bFlags)
{
    ArenaTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<Arena>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
ArenaTransitPtr ArenaBase::create(void)
{
    return createLocal();
}

Arena *ArenaBase::createEmptyLocal(BitVector bFlags)
{
    Arena *returnValue;

    newPtr<Arena>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
Arena *ArenaBase::createEmpty(void)
{
    return createEmptyLocal();
}


FieldContainerTransitPtr ArenaBase::shallowCopyLocal(
    BitVector bFlags) const
{
    Arena *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const Arena *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr ArenaBase::shallowCopyDependent(
    BitVector bFlags) const
{
    Arena *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const Arena *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr ArenaBase::shallowCopy(void) const
{
    return shallowCopyLocal();
}




/*------------------------- constructors ----------------------------------*/

ArenaBase::ArenaBase(void) :
    Inherited(),
    _mfWorker                 (this,
                          WorkerFieldId,
                          Worker::ParentFieldId),
    _mfItems                  (this,
                          ItemsFieldId,
                          Item::ParentFieldId)
{
}

ArenaBase::ArenaBase(const ArenaBase &source) :
    Inherited(source),
    _mfWorker                 (this,
                          WorkerFieldId,
                          Worker::ParentFieldId),
    _mfItems                  (this,
                          ItemsFieldId,
                          Item::ParentFieldId)
{
}


/*-------------------------- destructors ----------------------------------*/

ArenaBase::~ArenaBase(void)
{
}

/*-------------------------------------------------------------------------*/
/* Child linking                                                           */

bool ArenaBase::unlinkChild(
    FieldContainer * const pChild,
    UInt16           const childFieldId)
{
    if(childFieldId == WorkerFieldId)
    {
        Worker * pTypedChild =
            dynamic_cast<Worker *>(pChild);

        if(pTypedChild != NULL)
        {
            Int32 iChildIdx = _mfWorker.findIndex(pTypedChild);

            if(iChildIdx != -1)
            {
                editMField(WorkerFieldMask, _mfWorker);

                _mfWorker.erase(iChildIdx);

                return true;
            }

            SWARNING << "Parent (["        << this
                     << "] id ["           << this->getId()
                     << "] type ["         << this->getType().getCName()
                     << "] childFieldId [" << childFieldId
                     << "]) - Child (["    << pChild
                     << "] id ["           << pChild->getId()
                     << "] type ["         << pChild->getType().getCName()
                     << "]): link inconsistent!"
                     << std::endl;

            return false;
        }

        return false;
    }

    if(childFieldId == ItemsFieldId)
    {
        Item * pTypedChild =
            dynamic_cast<Item *>(pChild);

        if(pTypedChild != NULL)
        {
            Int32 iChildIdx = _mfItems.findIndex(pTypedChild);

            if(iChildIdx != -1)
            {
                editMField(ItemsFieldMask, _mfItems);

                _mfItems.erase(iChildIdx);

                return true;
            }

            SWARNING << "Parent (["        << this
                     << "] id ["           << this->getId()
                     << "] type ["         << this->getType().getCName()
                     << "] childFieldId [" << childFieldId
                     << "]) - Child (["    << pChild
                     << "] id ["           << pChild->getId()
                     << "] type ["         << pChild->getType().getCName()
                     << "]): link inconsistent!"
                     << std::endl;

            return false;
        }

        return false;
    }


    return Inherited::unlinkChild(pChild, childFieldId);
}

void ArenaBase::onCreate(const Arena *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        Arena *pThis = static_cast<Arena *>(this);

        MFUnrecChildWorkerPtr::const_iterator WorkerIt  =
            source->_mfWorker.begin();
        MFUnrecChildWorkerPtr::const_iterator WorkerEnd =
            source->_mfWorker.end  ();

        while(WorkerIt != WorkerEnd)
        {
            pThis->pushToWorker(*WorkerIt);

            ++WorkerIt;
        }

        MFUnrecChildItemPtr::const_iterator ItemsIt  =
            source->_mfItems.begin();
        MFUnrecChildItemPtr::const_iterator ItemsEnd =
            source->_mfItems.end  ();

        while(ItemsIt != ItemsEnd)
        {
            pThis->pushToItems(*ItemsIt);

            ++ItemsIt;
        }
    }
}

GetFieldHandlePtr ArenaBase::getHandleWorker          (void) const
{
    MFUnrecChildWorkerPtr::GetHandlePtr returnValue(
        new  MFUnrecChildWorkerPtr::GetHandle(
             &_mfWorker,
             this->getType().getFieldDesc(WorkerFieldId),
             const_cast<ArenaBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ArenaBase::editHandleWorker         (void)
{
    MFUnrecChildWorkerPtr::EditHandlePtr returnValue(
        new  MFUnrecChildWorkerPtr::EditHandle(
             &_mfWorker,
             this->getType().getFieldDesc(WorkerFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&Arena::pushToWorker,
                    static_cast<Arena *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&Arena::removeFromWorker,
                    static_cast<Arena *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&Arena::removeObjFromWorker,
                    static_cast<Arena *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&Arena::clearWorker,
                    static_cast<Arena *>(this)));

    editMField(WorkerFieldMask, _mfWorker);

    return returnValue;
}

GetFieldHandlePtr ArenaBase::getHandleItems           (void) const
{
    MFUnrecChildItemPtr::GetHandlePtr returnValue(
        new  MFUnrecChildItemPtr::GetHandle(
             &_mfItems,
             this->getType().getFieldDesc(ItemsFieldId),
             const_cast<ArenaBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ArenaBase::editHandleItems          (void)
{
    MFUnrecChildItemPtr::EditHandlePtr returnValue(
        new  MFUnrecChildItemPtr::EditHandle(
             &_mfItems,
             this->getType().getFieldDesc(ItemsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&Arena::pushToItems,
                    static_cast<Arena *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&Arena::removeFromItems,
                    static_cast<Arena *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&Arena::removeObjFromItems,
                    static_cast<Arena *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&Arena::clearItems,
                    static_cast<Arena *>(this)));

    editMField(ItemsFieldMask, _mfItems);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ArenaBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Arena *pThis = static_cast<Arena *>(this);

    pThis->execSync(static_cast<Arena *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *ArenaBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    Arena *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const Arena *>(pRefAspect),
                  dynamic_cast<const Arena *>(this));

    return returnValue;
}
#endif

void ArenaBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<Arena *>(this)->clearWorker();

    static_cast<Arena *>(this)->clearItems();


}


VCORE_END_NAMESPACE
