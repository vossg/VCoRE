/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class VCoreRendererItem!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#include "OSGConfig.h"




#include "OSGVCoreRendererItemBase.h"
#include "OSGVCoreRendererItem.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::VCoreRendererItem
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var std::string     VCoreRendererItemBase::_sfRootRef
    
*/

/*! \var std::string     VCoreRendererItemBase::_sfCameraRef
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<VCoreRendererItem *>::_type("VCoreRendererItemPtr", "VCoreItemPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(VCoreRendererItem *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           VCoreRendererItem *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           VCoreRendererItem *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void VCoreRendererItemBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFString::Description(
        SFString::getClassType(),
        "rootRef",
        "",
        RootRefFieldId, RootRefFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&VCoreRendererItem::editHandleRootRef),
        static_cast<FieldGetMethodSig >(&VCoreRendererItem::getHandleRootRef));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "cameraRef",
        "",
        CameraRefFieldId, CameraRefFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&VCoreRendererItem::editHandleCameraRef),
        static_cast<FieldGetMethodSig >(&VCoreRendererItem::getHandleCameraRef));

    oType.addInitialDesc(pDesc);
}


VCoreRendererItemBase::TypeObject VCoreRendererItemBase::_type(
    VCoreRendererItemBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&VCoreRendererItemBase::createEmptyLocal),
    VCoreRendererItem::initMethod,
    VCoreRendererItem::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&VCoreRendererItem::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\" ?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"VCoreRendererItem\"\n"
    "    parent=\"VCoreItem\"\n"
    "    library=\"VCoreSystem\"\n"
    "    structure=\"concrete\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    isNodeCore=\"false\"\n"
    "    isBundle=\"true\"\n"
    "    docGroupBase=\"GrpVCoreSystem\"\n"
    "    >\n"
    "  <Field\n"
    "      name=\"rootRef\"\n"
    "      type=\"std::string\"\n"
    "      cardinality=\"single\"\n"
    "      visibility=\"external\"\n"
    "      access=\"public\"\n"
    "      >\n"
    "  </Field>\n"
    "  <Field\n"
    "      name=\"cameraRef\"\n"
    "      type=\"std::string\"\n"
    "      cardinality=\"single\"\n"
    "      visibility=\"external\"\n"
    "      access=\"public\"\n"
    "      >\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &VCoreRendererItemBase::getType(void)
{
    return _type;
}

const FieldContainerType &VCoreRendererItemBase::getType(void) const
{
    return _type;
}

UInt32 VCoreRendererItemBase::getContainerSize(void) const
{
    return sizeof(VCoreRendererItem);
}

/*------------------------- decorator get ------------------------------*/


SFString *VCoreRendererItemBase::editSFRootRef(void)
{
    editSField(RootRefFieldMask);

    return &_sfRootRef;
}

const SFString *VCoreRendererItemBase::getSFRootRef(void) const
{
    return &_sfRootRef;
}


SFString *VCoreRendererItemBase::editSFCameraRef(void)
{
    editSField(CameraRefFieldMask);

    return &_sfCameraRef;
}

const SFString *VCoreRendererItemBase::getSFCameraRef(void) const
{
    return &_sfCameraRef;
}






/*------------------------------ access -----------------------------------*/

UInt32 VCoreRendererItemBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (RootRefFieldMask & whichField))
    {
        returnValue += _sfRootRef.getBinSize();
    }
    if(FieldBits::NoField != (CameraRefFieldMask & whichField))
    {
        returnValue += _sfCameraRef.getBinSize();
    }

    return returnValue;
}

void VCoreRendererItemBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (RootRefFieldMask & whichField))
    {
        _sfRootRef.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CameraRefFieldMask & whichField))
    {
        _sfCameraRef.copyToBin(pMem);
    }
}

void VCoreRendererItemBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (RootRefFieldMask & whichField))
    {
        editSField(RootRefFieldMask);
        _sfRootRef.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CameraRefFieldMask & whichField))
    {
        editSField(CameraRefFieldMask);
        _sfCameraRef.copyFromBin(pMem);
    }
}

//! create a new instance of the class
VCoreRendererItemTransitPtr VCoreRendererItemBase::createLocal(BitVector bFlags)
{
    VCoreRendererItemTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<VCoreRendererItem>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
VCoreRendererItemTransitPtr VCoreRendererItemBase::createDependent(BitVector bFlags)
{
    VCoreRendererItemTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<VCoreRendererItem>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
VCoreRendererItemTransitPtr VCoreRendererItemBase::create(void)
{
    return createLocal();
}

VCoreRendererItem *VCoreRendererItemBase::createEmptyLocal(BitVector bFlags)
{
    VCoreRendererItem *returnValue;

    newPtr<VCoreRendererItem>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
VCoreRendererItem *VCoreRendererItemBase::createEmpty(void)
{
    return createEmptyLocal();
}


FieldContainerTransitPtr VCoreRendererItemBase::shallowCopyLocal(
    BitVector bFlags) const
{
    VCoreRendererItem *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const VCoreRendererItem *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr VCoreRendererItemBase::shallowCopyDependent(
    BitVector bFlags) const
{
    VCoreRendererItem *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const VCoreRendererItem *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr VCoreRendererItemBase::shallowCopy(void) const
{
    return shallowCopyLocal();
}




/*------------------------- constructors ----------------------------------*/

VCoreRendererItemBase::VCoreRendererItemBase(void) :
    Inherited(),
    _sfRootRef                (),
    _sfCameraRef              ()
{
}

VCoreRendererItemBase::VCoreRendererItemBase(const VCoreRendererItemBase &source) :
    Inherited(source),
    _sfRootRef                (source._sfRootRef                ),
    _sfCameraRef              (source._sfCameraRef              )
{
}


/*-------------------------- destructors ----------------------------------*/

VCoreRendererItemBase::~VCoreRendererItemBase(void)
{
}


GetFieldHandlePtr VCoreRendererItemBase::getHandleRootRef         (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfRootRef,
             this->getType().getFieldDesc(RootRefFieldId),
             const_cast<VCoreRendererItemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VCoreRendererItemBase::editHandleRootRef        (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfRootRef,
             this->getType().getFieldDesc(RootRefFieldId),
             this));


    editSField(RootRefFieldMask);

    return returnValue;
}

GetFieldHandlePtr VCoreRendererItemBase::getHandleCameraRef       (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfCameraRef,
             this->getType().getFieldDesc(CameraRefFieldId),
             const_cast<VCoreRendererItemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VCoreRendererItemBase::editHandleCameraRef      (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfCameraRef,
             this->getType().getFieldDesc(CameraRefFieldId),
             this));


    editSField(CameraRefFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void VCoreRendererItemBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    VCoreRendererItem *pThis = static_cast<VCoreRendererItem *>(this);

    pThis->execSync(static_cast<VCoreRendererItem *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *VCoreRendererItemBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    VCoreRendererItem *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const VCoreRendererItem *>(pRefAspect),
                  dynamic_cast<const VCoreRendererItem *>(this));

    return returnValue;
}
#endif

void VCoreRendererItemBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
