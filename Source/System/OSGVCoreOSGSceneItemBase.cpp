/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class VCoreOSGSceneItem!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#include "OSGConfig.h"




#include "OSGVCoreOSGSceneItemBase.h"
#include "OSGVCoreOSGSceneItem.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::VCoreOSGSceneItem
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var std::string     VCoreOSGSceneItemBase::_mfUrl
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<VCoreOSGSceneItem *>::_type("VCoreOSGSceneItemPtr", "VCoreItemPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(VCoreOSGSceneItem *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           VCoreOSGSceneItem *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           VCoreOSGSceneItem *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void VCoreOSGSceneItemBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFString::Description(
        MFString::getClassType(),
        "url",
        "",
        UrlFieldId, UrlFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&VCoreOSGSceneItem::editHandleUrl),
        static_cast<FieldGetMethodSig >(&VCoreOSGSceneItem::getHandleUrl));

    oType.addInitialDesc(pDesc);
}


VCoreOSGSceneItemBase::TypeObject VCoreOSGSceneItemBase::_type(
    VCoreOSGSceneItemBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&VCoreOSGSceneItemBase::createEmptyLocal),
    VCoreOSGSceneItem::initMethod,
    VCoreOSGSceneItem::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&VCoreOSGSceneItem::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\" ?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"VCoreOSGSceneItem\"\n"
    "    parent=\"VCoreItem\"\n"
    "    library=\"VCoreSystem\"\n"
    "    structure=\"concrete\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    isNodeCore=\"false\"\n"
    "    isBundle=\"true\"\n"
    "    docGroupBase=\"GrpVCoreSystem\"\n"
    "    >\n"
    "  <Field\n"
    "      name=\"url\"\n"
    "      type=\"std::string\"\n"
    "      cardinality=\"multi\"\n"
    "      visibility=\"external\"\n"
    "      access=\"public\"\n"
    "      >\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &VCoreOSGSceneItemBase::getType(void)
{
    return _type;
}

const FieldContainerType &VCoreOSGSceneItemBase::getType(void) const
{
    return _type;
}

UInt32 VCoreOSGSceneItemBase::getContainerSize(void) const
{
    return sizeof(VCoreOSGSceneItem);
}

/*------------------------- decorator get ------------------------------*/


MFString *VCoreOSGSceneItemBase::editMFUrl(void)
{
    editMField(UrlFieldMask, _mfUrl);

    return &_mfUrl;
}

const MFString *VCoreOSGSceneItemBase::getMFUrl(void) const
{
    return &_mfUrl;
}






/*------------------------------ access -----------------------------------*/

UInt32 VCoreOSGSceneItemBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (UrlFieldMask & whichField))
    {
        returnValue += _mfUrl.getBinSize();
    }

    return returnValue;
}

void VCoreOSGSceneItemBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (UrlFieldMask & whichField))
    {
        _mfUrl.copyToBin(pMem);
    }
}

void VCoreOSGSceneItemBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (UrlFieldMask & whichField))
    {
        editMField(UrlFieldMask, _mfUrl);
        _mfUrl.copyFromBin(pMem);
    }
}

//! create a new instance of the class
VCoreOSGSceneItemTransitPtr VCoreOSGSceneItemBase::createLocal(BitVector bFlags)
{
    VCoreOSGSceneItemTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<VCoreOSGSceneItem>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
VCoreOSGSceneItemTransitPtr VCoreOSGSceneItemBase::createDependent(BitVector bFlags)
{
    VCoreOSGSceneItemTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<VCoreOSGSceneItem>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
VCoreOSGSceneItemTransitPtr VCoreOSGSceneItemBase::create(void)
{
    return createLocal();
}

VCoreOSGSceneItem *VCoreOSGSceneItemBase::createEmptyLocal(BitVector bFlags)
{
    VCoreOSGSceneItem *returnValue;

    newPtr<VCoreOSGSceneItem>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
VCoreOSGSceneItem *VCoreOSGSceneItemBase::createEmpty(void)
{
    return createEmptyLocal();
}


FieldContainerTransitPtr VCoreOSGSceneItemBase::shallowCopyLocal(
    BitVector bFlags) const
{
    VCoreOSGSceneItem *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const VCoreOSGSceneItem *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr VCoreOSGSceneItemBase::shallowCopyDependent(
    BitVector bFlags) const
{
    VCoreOSGSceneItem *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const VCoreOSGSceneItem *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr VCoreOSGSceneItemBase::shallowCopy(void) const
{
    return shallowCopyLocal();
}




/*------------------------- constructors ----------------------------------*/

VCoreOSGSceneItemBase::VCoreOSGSceneItemBase(void) :
    Inherited(),
    _mfUrl                    ()
{
}

VCoreOSGSceneItemBase::VCoreOSGSceneItemBase(const VCoreOSGSceneItemBase &source) :
    Inherited(source),
    _mfUrl                    (source._mfUrl                    )
{
}


/*-------------------------- destructors ----------------------------------*/

VCoreOSGSceneItemBase::~VCoreOSGSceneItemBase(void)
{
}


GetFieldHandlePtr VCoreOSGSceneItemBase::getHandleUrl             (void) const
{
    MFString::GetHandlePtr returnValue(
        new  MFString::GetHandle(
             &_mfUrl,
             this->getType().getFieldDesc(UrlFieldId),
             const_cast<VCoreOSGSceneItemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VCoreOSGSceneItemBase::editHandleUrl            (void)
{
    MFString::EditHandlePtr returnValue(
        new  MFString::EditHandle(
             &_mfUrl,
             this->getType().getFieldDesc(UrlFieldId),
             this));


    editMField(UrlFieldMask, _mfUrl);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void VCoreOSGSceneItemBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    VCoreOSGSceneItem *pThis = static_cast<VCoreOSGSceneItem *>(this);

    pThis->execSync(static_cast<VCoreOSGSceneItem *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *VCoreOSGSceneItemBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    VCoreOSGSceneItem *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const VCoreOSGSceneItem *>(pRefAspect),
                  dynamic_cast<const VCoreOSGSceneItem *>(this));

    return returnValue;
}
#endif

void VCoreOSGSceneItemBase::resolveLinks(void)
{
    Inherited::resolveLinks();

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfUrl.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE
