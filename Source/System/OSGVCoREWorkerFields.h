/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGWORKERFIELDS_H_
#define _OSGWORKERFIELDS_H_
#ifdef __sgi
#pragma once
#endif

#include "OSGConfig.h"
#include "OSGVCoRESystemDef.h"

#include "OSGFieldContainerFields.h"
#include "OSGPointerSField.h"
#include "OSGPointerMField.h"


VCORE_BEGIN_NAMESPACE

OSG_IMPORT_NAMESPACE;

class Worker;

OSG_GEN_CONTAINERPTR(Worker);

VCORE_END_NAMESPACE

OSG_BEGIN_NAMESPACE

VCORE_IMPORT_NAMESPACE;
/*! \ingroup GrpVCoreSystemFieldTraits
    \ingroup GrpLibOSGVCoRESystem
 */
template <>
struct FieldTraits<Worker *, nsVCoRE> :
    public FieldTraitsFCPtrBase<Worker *, nsVCoRE>
{
  private:

    static DataType             _type;

  public:

    typedef FieldTraits<Worker *, nsVCoRE>  Self;

    enum                        { Convertible = NotConvertible };

    static OSG_VCORESYSTEM_DLLMAPPING DataType &getType(void);

    template<typename RefCountPolicy> inline
    static const Char8    *getSName     (void);

    template<typename RefCountPolicy> inline
    static const Char8    *getMName     (void);

};

template<> inline
const Char8 *FieldTraits<Worker *, nsVCoRE>::getSName<RecordedRefCountPolicy>(void)
{
    return "SFRecWorkerPtr"; 
}

template<> inline
const Char8 *FieldTraits<Worker *, nsVCoRE>::getSName<UnrecordedRefCountPolicy>(void)
{
    return "SFUnrecWorkerPtr"; 
}

template<> inline
const Char8 *FieldTraits<Worker *, nsVCoRE>::getSName<WeakRefCountPolicy>(void)
{
    return "SFWeakWorkerPtr"; 
}

template<> inline
const Char8 *FieldTraits<Worker *, nsVCoRE>::getSName<NoRefCountPolicy>(void)
{
    return "SFUnrefdWorkerPtr"; 
}

template<> inline
const Char8 *FieldTraits<Worker *, nsVCoRE>::getMName<RecordedRefCountPolicy>(void)
{
    return "MFRecWorkerPtr"; 
}

template<> inline
const Char8 *FieldTraits<Worker *, nsVCoRE>::getMName<UnrecordedRefCountPolicy>(void)
{
    return "MFUnrecWorkerPtr"; 
}

template<> inline
const Char8 *FieldTraits<Worker *, nsVCoRE>::getMName<WeakRefCountPolicy>(void)
{
    return "MFWeakWorkerPtr"; 
}

template<> inline
const Char8 *FieldTraits<Worker *, nsVCoRE>::getMName<NoRefCountPolicy>(void)
{
    return "MFUnrefdWorkerPtr"; 
}


/*! \ingroup GrpVCoreSystemFieldTraits
 */
template <>
struct FieldTraits<Worker *, nsVCoRE + 1> :
    public FieldTraitsFCPtrBase<Worker *, nsVCoRE + 1>
{
  private:

  public:
    typedef FieldTraits<Worker *, nsVCoRE + 1>  Self;

    enum                        { Convertible = NotConvertible };

    static OSG_VCORESYSTEM_DLLMAPPING DataType &getType(void);

    template<typename RefCountPolicy> inline
    static const Char8    *getSName     (void);

    template<typename RefCountPolicy> inline
    static const Char8    *getMName     (void);
};

template<> inline
const Char8 *FieldTraits<Worker *, nsVCoRE + 1>::getSName<RecordedRefCountPolicy>(void)
{
    return "SFRecChildWorkerPtr"; 
}

template<> inline
const Char8 *FieldTraits<Worker *, nsVCoRE + 1>::getSName<UnrecordedRefCountPolicy>(void)
{
    return "SFUnrecChildWorkerPtr"; 
}

template<> inline
const Char8 *FieldTraits<Worker *, nsVCoRE + 1>::getSName<WeakRefCountPolicy>(void)
{
    return "SFWeakChildWorkerPtr"; 
}

template<> inline
const Char8 *FieldTraits<Worker *, nsVCoRE + 1>::getSName<NoRefCountPolicy>(void)
{
    return "SFUnrefdChildWorkerPtr"; 
}

template<> inline
const Char8 *FieldTraits<Worker *, nsVCoRE + 1>::getMName<RecordedRefCountPolicy>(void)
{
    return "MFRecChildWorkerPtr"; 
}

template<> inline
const Char8 *FieldTraits<Worker *, nsVCoRE + 1>::getMName<UnrecordedRefCountPolicy>(void)
{
    return "MFUnrecChildWorkerPtr"; 
}

template<> inline
const Char8 *FieldTraits<Worker *, nsVCoRE + 1>::getMName<WeakRefCountPolicy>(void)
{
    return "MFWeakChildWorkerPtr"; 
}

template<> inline
const Char8 *FieldTraits<Worker *, nsVCoRE + 1>::getMName<NoRefCountPolicy>(void)
{
    return "MFUnrefdChildWorkerPtr"; 
}


OSG_END_NAMESPACE

VCORE_BEGIN_NAMESPACE

OSG_IMPORT_NAMESPACE;

#ifndef DOXYGEN_SHOULD_SKIP_THIS
/*! \ingroup GrpVCoreSystemFieldSFields */
typedef PointerSField<Worker *,
                      RecordedRefCountPolicy, nsVCoRE  > SFRecWorkerPtr;
/*! \ingroup GrpVCoreSystemFieldSFields */
typedef PointerSField<Worker *,
                      UnrecordedRefCountPolicy, nsVCoRE> SFUnrecWorkerPtr;
/*! \ingroup GrpVCoreSystemFieldSFields */
typedef PointerSField<Worker *,
                      WeakRefCountPolicy, nsVCoRE      > SFWeakWorkerPtr;
/*! \ingroup GrpVCoreSystemFieldSFields */
typedef PointerSField<Worker *,
                      NoRefCountPolicy, nsVCoRE        > SFUncountedWorkerPtr;


/*! \ingroup GrpVCoreSystemFieldMFields */
typedef PointerMField<Worker *,
                      RecordedRefCountPolicy, nsVCoRE  > MFRecWorkerPtr;
/*! \ingroup GrpVCoreSystemFieldMFields */
typedef PointerMField<Worker *,
                      UnrecordedRefCountPolicy, nsVCoRE> MFUnrecWorkerPtr;
/*! \ingroup GrpVCoreSystemFieldMFields */
typedef PointerMField<Worker *,
                      WeakRefCountPolicy, nsVCoRE      > MFWeakWorkerPtr;
/*! \ingroup GrpVCoreSystemFieldMFields */
typedef PointerMField<Worker *,
                      NoRefCountPolicy, nsVCoRE        > MFUncountedWorkerPtr;



/*! \ingroup GrpVCoreSystemFieldSFields */
typedef ChildPointerSField<
          Worker *, 
          UnrecordedRefCountPolicy,
          nsVCoRE + 1             > SFUnrecChildWorkerPtr;


/*! \ingroup GrpVCoreSystemFieldMFields */
typedef ChildPointerMField<
          Worker *, 
          UnrecordedRefCountPolicy,
          nsVCoRE + 1             > MFUnrecChildWorkerPtr;



#else // these are the doxygen hacks

/*! \ingroup GrpVCoreSystemFieldSFields \ingroup GrpLibOSGVCoRESystem */
struct SFRecWorkerPtr : 
    public PointerSField<Worker *,
                         RecordedRefCountPolicy> {};
/*! \ingroup GrpVCoreSystemFieldSFields \ingroup GrpLibOSGVCoRESystem */
struct SFUnrecWorkerPtr : 
    public PointerSField<Worker *,
                         UnrecordedRefCountPolicy> {};
/*! \ingroup GrpVCoreSystemFieldSFields \ingroup GrpLibOSGVCoRESystem */
struct SFWeakWorkerPtr :
    public PointerSField<Worker *,
                         WeakRefCountPolicy> {};
/*! \ingroup GrpVCoreSystemFieldSFields \ingroup GrpLibOSGVCoRESystem */
struct SFUncountedWorkerPtr :
    public PointerSField<Worker *,
                         NoRefCountPolicy> {};


/*! \ingroup GrpVCoreSystemFieldMFields \ingroup GrpLibOSGVCoRESystem */
struct MFRecWorkerPtr :
    public PointerMField<Worker *,
                         RecordedRefCountPolicy  > {};
/*! \ingroup GrpVCoreSystemFieldMFields \ingroup GrpLibOSGVCoRESystem */
struct MFUnrecWorkerPtr :
    public PointerMField<Worker *,
                         UnrecordedRefCountPolicy> {};
/*! \ingroup GrpVCoreSystemFieldMFields \ingroup GrpLibOSGVCoRESystem */
struct MFWeakWorkerPtr :
    public PointerMField<Worker *,
                         WeakRefCountPolicy      > {};
/*! \ingroup GrpVCoreSystemFieldMFields \ingroup GrpLibOSGVCoRESystem */
struct MFUncountedWorkerPtr :
    public PointerMField<Worker *,
                         NoRefCountPolicy        > {};



/*! \ingroup GrpVCoreSystemFieldSFields \ingroup GrpLibOSGVCoRESystem */
struct SFUnrecChildWorkerPtr :
    public ChildPointerSField<
        Worker *, 
        UnrecordedRefCountPolicy,
        nsVCoRE + 1             > {};


/*! \ingroup GrpVCoreSystemFieldMFields \ingroup GrpLibOSGVCoRESystem */
struct MFUnrecChildWorkerPtr :
    public ChildPointerMField<
        Worker *, 
        UnrecordedRefCountPolicy,
        nsVCoRE + 1             > {};


#endif // these are the doxygen hacks

VCORE_END_NAMESPACE

#endif /* _OSGWORKERFIELDS_H_ */
