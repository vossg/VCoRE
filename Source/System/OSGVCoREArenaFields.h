/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGARENAFIELDS_H_
#define _OSGARENAFIELDS_H_
#ifdef __sgi
#pragma once
#endif

#include "OSGConfig.h"
#include "OSGVCoRESystemDef.h"

#include "OSGFieldContainerFields.h"
#include "OSGPointerSField.h"
#include "OSGPointerMField.h"


VCORE_BEGIN_NAMESPACE

OSG_IMPORT_NAMESPACE;

class Arena;

OSG_GEN_CONTAINERPTR(Arena);

VCORE_END_NAMESPACE

OSG_BEGIN_NAMESPACE

VCORE_IMPORT_NAMESPACE;
/*! \ingroup GrpVCoreSystemFieldTraits
    \ingroup GrpLibOSGVCoRESystem
 */
template <>
struct FieldTraits<Arena *, nsVCoRE> :
    public FieldTraitsFCPtrBase<Arena *, nsVCoRE>
{
  private:

    static PointerType             _type;

  public:

    typedef FieldTraits<Arena *, nsVCoRE>  Self;

    enum                        { Convertible = NotConvertible };

    static OSG_VCORESYSTEM_DLLMAPPING DataType &getType(void);

    template<typename RefCountPolicy> inline
    static const Char8    *getSName     (void);

    template<typename RefCountPolicy> inline
    static const Char8    *getMName     (void);

};

template<> inline
const Char8 *FieldTraits<Arena *, nsVCoRE>::getSName<RecordedRefCountPolicy>(void)
{
    return "SFRecArenaPtr"; 
}

template<> inline
const Char8 *FieldTraits<Arena *, nsVCoRE>::getSName<UnrecordedRefCountPolicy>(void)
{
    return "SFUnrecArenaPtr"; 
}

template<> inline
const Char8 *FieldTraits<Arena *, nsVCoRE>::getSName<WeakRefCountPolicy>(void)
{
    return "SFWeakArenaPtr"; 
}

template<> inline
const Char8 *FieldTraits<Arena *, nsVCoRE>::getSName<NoRefCountPolicy>(void)
{
    return "SFUnrefdArenaPtr"; 
}

template<> inline
const Char8 *FieldTraits<Arena *, nsVCoRE>::getMName<RecordedRefCountPolicy>(void)
{
    return "MFRecArenaPtr"; 
}

template<> inline
const Char8 *FieldTraits<Arena *, nsVCoRE>::getMName<UnrecordedRefCountPolicy>(void)
{
    return "MFUnrecArenaPtr"; 
}

template<> inline
const Char8 *FieldTraits<Arena *, nsVCoRE>::getMName<WeakRefCountPolicy>(void)
{
    return "MFWeakArenaPtr"; 
}

template<> inline
const Char8 *FieldTraits<Arena *, nsVCoRE>::getMName<NoRefCountPolicy>(void)
{
    return "MFUnrefdArenaPtr"; 
}


/*! \ingroup GrpVCoreSystemFieldTraits
 */
template <>
struct FieldTraits<Arena *, nsVCoRE + 1> : 
    public FieldTraitsFCPtrBase<Arena *, nsVCoRE + 1>
{
  private:

    static  DataType                                _type;

  public:

    static const bool bIsPointerField = true;

    typedef FieldTraits<Arena *, nsVCoRE + 1> Self;


    enum             { Convertible = Self::NotConvertible };
    
    static OSG_VCORESYSTEM_DLLMAPPING
                 DataType &getType (void);

    static const Char8    *getSName(void) 
    {
        return "SFParentArenaPtr"; 
    }

    static const Char8    *getMName(void) 
    { 
        return "MFParentArenaPtr"; 
    }
};

OSG_END_NAMESPACE

VCORE_BEGIN_NAMESPACE

OSG_IMPORT_NAMESPACE;

#ifndef DOXYGEN_SHOULD_SKIP_THIS
/*! \ingroup GrpVCoreSystemFieldSFields */
typedef PointerSField<Arena *,
                      RecordedRefCountPolicy, nsVCoRE  > SFRecArenaPtr;
/*! \ingroup GrpVCoreSystemFieldSFields */
typedef PointerSField<Arena *,
                      UnrecordedRefCountPolicy, nsVCoRE> SFUnrecArenaPtr;
/*! \ingroup GrpVCoreSystemFieldSFields */
typedef PointerSField<Arena *,
                      WeakRefCountPolicy, nsVCoRE      > SFWeakArenaPtr;
/*! \ingroup GrpVCoreSystemFieldSFields */
typedef PointerSField<Arena *,
                      NoRefCountPolicy, nsVCoRE        > SFUncountedArenaPtr;


/*! \ingroup GrpVCoreSystemFieldMFields */
typedef PointerMField<Arena *,
                      RecordedRefCountPolicy, nsVCoRE  > MFRecArenaPtr;
/*! \ingroup GrpVCoreSystemFieldMFields */
typedef PointerMField<Arena *,
                      UnrecordedRefCountPolicy, nsVCoRE> MFUnrecArenaPtr;
/*! \ingroup GrpVCoreSystemFieldMFields */
typedef PointerMField<Arena *,
                      WeakRefCountPolicy, nsVCoRE      > MFWeakArenaPtr;
/*! \ingroup GrpVCoreSystemFieldMFields */
typedef PointerMField<Arena *,
                      NoRefCountPolicy, nsVCoRE        > MFUncountedArenaPtr;



/*! \ingroup GrpVCoreSystemFieldSFields */
typedef ParentPointerSField<
          Arena *, 
          NoRefCountPolicy,
          nsVCoRE + 1    > SFParentArenaPtr;


#else // these are the doxygen hacks

/*! \ingroup GrpVCoreSystemFieldSFields \ingroup GrpLibOSGVCoRESystem */
struct SFRecArenaPtr : 
    public PointerSField<Arena *,
                         RecordedRefCountPolicy> {};
/*! \ingroup GrpVCoreSystemFieldSFields \ingroup GrpLibOSGVCoRESystem */
struct SFUnrecArenaPtr : 
    public PointerSField<Arena *,
                         UnrecordedRefCountPolicy> {};
/*! \ingroup GrpVCoreSystemFieldSFields \ingroup GrpLibOSGVCoRESystem */
struct SFWeakArenaPtr :
    public PointerSField<Arena *,
                         WeakRefCountPolicy> {};
/*! \ingroup GrpVCoreSystemFieldSFields \ingroup GrpLibOSGVCoRESystem */
struct SFUncountedArenaPtr :
    public PointerSField<Arena *,
                         NoRefCountPolicy> {};


/*! \ingroup GrpVCoreSystemFieldMFields \ingroup GrpLibOSGVCoRESystem */
struct MFRecArenaPtr :
    public PointerMField<Arena *,
                         RecordedRefCountPolicy  > {};
/*! \ingroup GrpVCoreSystemFieldMFields \ingroup GrpLibOSGVCoRESystem */
struct MFUnrecArenaPtr :
    public PointerMField<Arena *,
                         UnrecordedRefCountPolicy> {};
/*! \ingroup GrpVCoreSystemFieldMFields \ingroup GrpLibOSGVCoRESystem */
struct MFWeakArenaPtr :
    public PointerMField<Arena *,
                         WeakRefCountPolicy      > {};
/*! \ingroup GrpVCoreSystemFieldMFields \ingroup GrpLibOSGVCoRESystem */
struct MFUncountedArenaPtr :
    public PointerMField<Arena *,
                         NoRefCountPolicy        > {};



/*! \ingroup GrpVCoreSystemFieldSFields \ingroup GrpLibOSGVCoRESystem */
struct SFParentArenaPtr :
    public ParentPointerSField<
        Arena *, 
        NoRefCountPolicy,
        nsVCoRE + 1    > {};

#endif // these are the doxygen hacks

VCORE_END_NAMESPACE

#endif /* _OSGARENAFIELDS_H_ */
