/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class VCoreViewarea!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#include "OSGConfig.h"



#include "OSGNode.h"                    // Root Class
#include "OSGVCoreRendererItem.h"       // Renderer Class

#include "OSGVCoreViewareaBase.h"
#include "OSGVCoreViewarea.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::VCoreViewarea
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var std::string     VCoreViewareaBase::_sfRendererRef
    
*/

/*! \var std::string     VCoreViewareaBase::_sfRootRef
    
*/

/*! \var std::string     VCoreViewareaBase::_sfCameraRef
    
*/

/*! \var Node *          VCoreViewareaBase::_sfRoot
    
*/

/*! \var VCoreRendererItem * VCoreViewareaBase::_sfRenderer
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<VCoreViewarea *>::_type("VCoreViewareaPtr", "AttachmentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(VCoreViewarea *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           VCoreViewarea *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           VCoreViewarea *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void VCoreViewareaBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFString::Description(
        SFString::getClassType(),
        "rendererRef",
        "",
        RendererRefFieldId, RendererRefFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&VCoreViewarea::editHandleRendererRef),
        static_cast<FieldGetMethodSig >(&VCoreViewarea::getHandleRendererRef));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "rootRef",
        "",
        RootRefFieldId, RootRefFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&VCoreViewarea::editHandleRootRef),
        static_cast<FieldGetMethodSig >(&VCoreViewarea::getHandleRootRef));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "cameraRef",
        "",
        CameraRefFieldId, CameraRefFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&VCoreViewarea::editHandleCameraRef),
        static_cast<FieldGetMethodSig >(&VCoreViewarea::getHandleCameraRef));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecNodePtr::Description(
        SFUnrecNodePtr::getClassType(),
        "root",
        "",
        RootFieldId, RootFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&VCoreViewarea::editHandleRoot),
        static_cast<FieldGetMethodSig >(&VCoreViewarea::getHandleRoot));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecVCoreRendererItemPtr::Description(
        SFUnrecVCoreRendererItemPtr::getClassType(),
        "renderer",
        "",
        RendererFieldId, RendererFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&VCoreViewarea::editHandleRenderer),
        static_cast<FieldGetMethodSig >(&VCoreViewarea::getHandleRenderer));

    oType.addInitialDesc(pDesc);
}


VCoreViewareaBase::TypeObject VCoreViewareaBase::_type(
    VCoreViewareaBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&VCoreViewareaBase::createEmptyLocal),
    VCoreViewarea::initMethod,
    VCoreViewarea::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&VCoreViewarea::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\" ?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"VCoreViewarea\"\n"
    "    parent=\"AttachmentContainer\"\n"
    "    library=\"VCoreSystem\"\n"
    "    structure=\"concrete\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    isNodeCore=\"false\"\n"
    "    isBundle=\"true\"\n"
    "    docGroupBase=\"GrpVCoreSystem\"\n"
    "   >\n"
    "  <Field\n"
    "      name=\"rendererRef\"\n"
    "      type=\"std::string\"\n"
    "      cardinality=\"single\"\n"
    "      visibility=\"external\"\n"
    "      access=\"public\"\n"
    "      >\n"
    "  </Field>\n"
    "  <Field\n"
    "      name=\"rootRef\"\n"
    "      type=\"std::string\"\n"
    "      cardinality=\"single\"\n"
    "      visibility=\"external\"\n"
    "      access=\"public\"\n"
    "      >\n"
    "  </Field>\n"
    "  <Field\n"
    "      name=\"cameraRef\"\n"
    "      type=\"std::string\"\n"
    "      cardinality=\"single\"\n"
    "      visibility=\"external\"\n"
    "      access=\"public\"\n"
    "      >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"root\"\n"
    "\t type=\"Node\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"internal\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "     category=\"pointer\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"renderer\"\n"
    "\t type=\"VCoreRendererItem\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"internal\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "     category=\"pointer\"\n"
    "\t >\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &VCoreViewareaBase::getType(void)
{
    return _type;
}

const FieldContainerType &VCoreViewareaBase::getType(void) const
{
    return _type;
}

UInt32 VCoreViewareaBase::getContainerSize(void) const
{
    return sizeof(VCoreViewarea);
}

/*------------------------- decorator get ------------------------------*/


SFString *VCoreViewareaBase::editSFRendererRef(void)
{
    editSField(RendererRefFieldMask);

    return &_sfRendererRef;
}

const SFString *VCoreViewareaBase::getSFRendererRef(void) const
{
    return &_sfRendererRef;
}


SFString *VCoreViewareaBase::editSFRootRef(void)
{
    editSField(RootRefFieldMask);

    return &_sfRootRef;
}

const SFString *VCoreViewareaBase::getSFRootRef(void) const
{
    return &_sfRootRef;
}


SFString *VCoreViewareaBase::editSFCameraRef(void)
{
    editSField(CameraRefFieldMask);

    return &_sfCameraRef;
}

const SFString *VCoreViewareaBase::getSFCameraRef(void) const
{
    return &_sfCameraRef;
}


//! Get the VCoreViewarea::_sfRoot field.
const SFUnrecNodePtr *VCoreViewareaBase::getSFRoot(void) const
{
    return &_sfRoot;
}

SFUnrecNodePtr      *VCoreViewareaBase::editSFRoot           (void)
{
    editSField(RootFieldMask);

    return &_sfRoot;
}

//! Get the VCoreViewarea::_sfRenderer field.
const SFUnrecVCoreRendererItemPtr *VCoreViewareaBase::getSFRenderer(void) const
{
    return &_sfRenderer;
}

SFUnrecVCoreRendererItemPtr *VCoreViewareaBase::editSFRenderer       (void)
{
    editSField(RendererFieldMask);

    return &_sfRenderer;
}





/*------------------------------ access -----------------------------------*/

UInt32 VCoreViewareaBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (RendererRefFieldMask & whichField))
    {
        returnValue += _sfRendererRef.getBinSize();
    }
    if(FieldBits::NoField != (RootRefFieldMask & whichField))
    {
        returnValue += _sfRootRef.getBinSize();
    }
    if(FieldBits::NoField != (CameraRefFieldMask & whichField))
    {
        returnValue += _sfCameraRef.getBinSize();
    }
    if(FieldBits::NoField != (RootFieldMask & whichField))
    {
        returnValue += _sfRoot.getBinSize();
    }
    if(FieldBits::NoField != (RendererFieldMask & whichField))
    {
        returnValue += _sfRenderer.getBinSize();
    }

    return returnValue;
}

void VCoreViewareaBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (RendererRefFieldMask & whichField))
    {
        _sfRendererRef.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RootRefFieldMask & whichField))
    {
        _sfRootRef.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CameraRefFieldMask & whichField))
    {
        _sfCameraRef.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RootFieldMask & whichField))
    {
        _sfRoot.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RendererFieldMask & whichField))
    {
        _sfRenderer.copyToBin(pMem);
    }
}

void VCoreViewareaBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (RendererRefFieldMask & whichField))
    {
        editSField(RendererRefFieldMask);
        _sfRendererRef.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RootRefFieldMask & whichField))
    {
        editSField(RootRefFieldMask);
        _sfRootRef.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CameraRefFieldMask & whichField))
    {
        editSField(CameraRefFieldMask);
        _sfCameraRef.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RootFieldMask & whichField))
    {
        editSField(RootFieldMask);
        _sfRoot.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RendererFieldMask & whichField))
    {
        editSField(RendererFieldMask);
        _sfRenderer.copyFromBin(pMem);
    }
}

//! create a new instance of the class
VCoreViewareaTransitPtr VCoreViewareaBase::createLocal(BitVector bFlags)
{
    VCoreViewareaTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<VCoreViewarea>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
VCoreViewareaTransitPtr VCoreViewareaBase::createDependent(BitVector bFlags)
{
    VCoreViewareaTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<VCoreViewarea>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
VCoreViewareaTransitPtr VCoreViewareaBase::create(void)
{
    return createLocal();
}

VCoreViewarea *VCoreViewareaBase::createEmptyLocal(BitVector bFlags)
{
    VCoreViewarea *returnValue;

    newPtr<VCoreViewarea>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
VCoreViewarea *VCoreViewareaBase::createEmpty(void)
{
    return createEmptyLocal();
}


FieldContainerTransitPtr VCoreViewareaBase::shallowCopyLocal(
    BitVector bFlags) const
{
    VCoreViewarea *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const VCoreViewarea *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr VCoreViewareaBase::shallowCopyDependent(
    BitVector bFlags) const
{
    VCoreViewarea *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const VCoreViewarea *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr VCoreViewareaBase::shallowCopy(void) const
{
    return shallowCopyLocal();
}




/*------------------------- constructors ----------------------------------*/

VCoreViewareaBase::VCoreViewareaBase(void) :
    Inherited(),
    _sfRendererRef            (),
    _sfRootRef                (),
    _sfCameraRef              (),
    _sfRoot                   (NULL),
    _sfRenderer               (NULL)
{
}

VCoreViewareaBase::VCoreViewareaBase(const VCoreViewareaBase &source) :
    Inherited(source),
    _sfRendererRef            (source._sfRendererRef            ),
    _sfRootRef                (source._sfRootRef                ),
    _sfCameraRef              (source._sfCameraRef              ),
    _sfRoot                   (NULL),
    _sfRenderer               (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

VCoreViewareaBase::~VCoreViewareaBase(void)
{
}

void VCoreViewareaBase::onCreate(const VCoreViewarea *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        VCoreViewarea *pThis = static_cast<VCoreViewarea *>(this);

        pThis->setRoot(source->getRoot());

        pThis->setRenderer(source->getRenderer());
    }
}

GetFieldHandlePtr VCoreViewareaBase::getHandleRendererRef     (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfRendererRef,
             this->getType().getFieldDesc(RendererRefFieldId),
             const_cast<VCoreViewareaBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VCoreViewareaBase::editHandleRendererRef    (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfRendererRef,
             this->getType().getFieldDesc(RendererRefFieldId),
             this));


    editSField(RendererRefFieldMask);

    return returnValue;
}

GetFieldHandlePtr VCoreViewareaBase::getHandleRootRef         (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfRootRef,
             this->getType().getFieldDesc(RootRefFieldId),
             const_cast<VCoreViewareaBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VCoreViewareaBase::editHandleRootRef        (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfRootRef,
             this->getType().getFieldDesc(RootRefFieldId),
             this));


    editSField(RootRefFieldMask);

    return returnValue;
}

GetFieldHandlePtr VCoreViewareaBase::getHandleCameraRef       (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfCameraRef,
             this->getType().getFieldDesc(CameraRefFieldId),
             const_cast<VCoreViewareaBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VCoreViewareaBase::editHandleCameraRef      (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfCameraRef,
             this->getType().getFieldDesc(CameraRefFieldId),
             this));


    editSField(CameraRefFieldMask);

    return returnValue;
}

GetFieldHandlePtr VCoreViewareaBase::getHandleRoot            (void) const
{
    SFUnrecNodePtr::GetHandlePtr returnValue(
        new  SFUnrecNodePtr::GetHandle(
             &_sfRoot,
             this->getType().getFieldDesc(RootFieldId),
             const_cast<VCoreViewareaBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VCoreViewareaBase::editHandleRoot           (void)
{
    SFUnrecNodePtr::EditHandlePtr returnValue(
        new  SFUnrecNodePtr::EditHandle(
             &_sfRoot,
             this->getType().getFieldDesc(RootFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&VCoreViewarea::setRoot,
                    static_cast<VCoreViewarea *>(this), _1));

    editSField(RootFieldMask);

    return returnValue;
}

GetFieldHandlePtr VCoreViewareaBase::getHandleRenderer        (void) const
{
    SFUnrecVCoreRendererItemPtr::GetHandlePtr returnValue(
        new  SFUnrecVCoreRendererItemPtr::GetHandle(
             &_sfRenderer,
             this->getType().getFieldDesc(RendererFieldId),
             const_cast<VCoreViewareaBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VCoreViewareaBase::editHandleRenderer       (void)
{
    SFUnrecVCoreRendererItemPtr::EditHandlePtr returnValue(
        new  SFUnrecVCoreRendererItemPtr::EditHandle(
             &_sfRenderer,
             this->getType().getFieldDesc(RendererFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&VCoreViewarea::setRenderer,
                    static_cast<VCoreViewarea *>(this), _1));

    editSField(RendererFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void VCoreViewareaBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    VCoreViewarea *pThis = static_cast<VCoreViewarea *>(this);

    pThis->execSync(static_cast<VCoreViewarea *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *VCoreViewareaBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    VCoreViewarea *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const VCoreViewarea *>(pRefAspect),
                  dynamic_cast<const VCoreViewarea *>(this));

    return returnValue;
}
#endif

void VCoreViewareaBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<VCoreViewarea *>(this)->setRoot(NULL);

    static_cast<VCoreViewarea *>(this)->setRenderer(NULL);


}


OSG_END_NAMESPACE
