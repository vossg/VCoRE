/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class OSGSceneItem!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#include "OSGConfig.h"



#include "OSGNode.h"                    // Root Class
#include "OSGFieldContainer.h"          // Globals Class
#include "OSGCamera.h"                  // Camera Class

#include "OSGVCoREOSGSceneItemBase.h"
#include "OSGVCoREOSGSceneItem.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

VCORE_IMPORT_NAMESPACE;

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::OSGSceneItem
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var std::string     OSGSceneItemBase::_mfUrl
    
*/

/*! \var std::string     OSGSceneItemBase::_sfMatchedUrl
    
*/

/*! \var Node *          OSGSceneItemBase::_sfRoot
    
*/

/*! \var FieldContainer * OSGSceneItemBase::_mfGlobals
    
*/

/*! \var std::string     OSGSceneItemBase::_mfGlobalUrl
    
*/

/*! \var std::string     OSGSceneItemBase::_sfMatchedGlobalUrl
    
*/

/*! \var Camera *        OSGSceneItemBase::_sfCamera
    
*/

/*! \var std::string     OSGSceneItemBase::_sfActiveCamera
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<OSGSceneItem *, nsVCoRE>::_type(
    "OSGSceneItemPtr", 
    "ItemPtr", 
    OSGSceneItem::getClassType(),
    nsVCoRE);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(OSGSceneItem *, nsVCoRE)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           OSGSceneItem *,
                           nsVCoRE);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           OSGSceneItem *,
                           nsVCoRE);

OSG_END_NAMESPACE

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

VCORE_BEGIN_NAMESPACE

OSG_IMPORT_NAMESPACE;

void OSGSceneItemBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFString::Description(
        MFString::getClassType(),
        "url",
        "",
        UrlFieldId, UrlFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&OSGSceneItem::editHandleUrl),
        static_cast<FieldGetMethodSig >(&OSGSceneItem::getHandleUrl));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "matchedUrl",
        "",
        MatchedUrlFieldId, MatchedUrlFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&OSGSceneItem::editHandleMatchedUrl),
        static_cast<FieldGetMethodSig >(&OSGSceneItem::getHandleMatchedUrl));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecNodePtr::Description(
        SFUnrecNodePtr::getClassType(),
        "root",
        "",
        RootFieldId, RootFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&OSGSceneItem::editHandleRoot),
        static_cast<FieldGetMethodSig >(&OSGSceneItem::getHandleRoot));

    oType.addInitialDesc(pDesc);

    pDesc = new MFRecFieldContainerPtr::Description(
        MFRecFieldContainerPtr::getClassType(),
        "globals",
        "",
        GlobalsFieldId, GlobalsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&OSGSceneItem::editHandleGlobals),
        static_cast<FieldGetMethodSig >(&OSGSceneItem::getHandleGlobals));

    oType.addInitialDesc(pDesc);

    pDesc = new MFString::Description(
        MFString::getClassType(),
        "globalUrl",
        "",
        GlobalUrlFieldId, GlobalUrlFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&OSGSceneItem::editHandleGlobalUrl),
        static_cast<FieldGetMethodSig >(&OSGSceneItem::getHandleGlobalUrl));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "matchedGlobalUrl",
        "",
        MatchedGlobalUrlFieldId, MatchedGlobalUrlFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&OSGSceneItem::editHandleMatchedGlobalUrl),
        static_cast<FieldGetMethodSig >(&OSGSceneItem::getHandleMatchedGlobalUrl));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecCameraPtr::Description(
        SFUnrecCameraPtr::getClassType(),
        "camera",
        "",
        CameraFieldId, CameraFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&OSGSceneItem::editHandleCamera),
        static_cast<FieldGetMethodSig >(&OSGSceneItem::getHandleCamera));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "activeCamera",
        "",
        ActiveCameraFieldId, ActiveCameraFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&OSGSceneItem::editHandleActiveCamera),
        static_cast<FieldGetMethodSig >(&OSGSceneItem::getHandleActiveCamera));

    oType.addInitialDesc(pDesc);
}


OSGSceneItemBase::TypeObject OSGSceneItemBase::_type(
    OSGSceneItemBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsVCoRE, //Namespace
    reinterpret_cast<PrototypeCreateF>(&OSGSceneItemBase::createEmptyLocal),
    OSGSceneItem::initMethod,
    OSGSceneItem::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&OSGSceneItem::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\" ?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"OSGSceneItem\"\n"
    "    parent=\"Item\"\n"
    "    library=\"VCoRESystem\"\n"
    "    structure=\"concrete\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    isNodeCore=\"false\"\n"
    "    isBundle=\"true\"\n"
    "    docGroupBase=\"GrpVCoreSystem\"\n"
    "    libnamespace=\"VCoRE\"\n"
    "    >\n"
    "  <Field\n"
    "      name=\"url\"\n"
    "      type=\"std::string\"\n"
    "      cardinality=\"multi\"\n"
    "      visibility=\"external\"\n"
    "      access=\"public\"\n"
    "      >\n"
    "  </Field>\n"
    "  <Field\n"
    "      name=\"matchedUrl\"\n"
    "      type=\"std::string\"\n"
    "      cardinality=\"single\"\n"
    "      visibility=\"external\"\n"
    "      access=\"public\"\n"
    "      >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"root\"\n"
    "\t type=\"Node\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"internal\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "     category=\"pointer\"\n"
    "\t >\n"
    "  </Field>\n"
    "\n"
    "  <Field\n"
    "      name=\"globals\"\n"
    "      type=\"FieldContainer\"\n"
    "      cardinality=\"multi\"\n"
    "      visibility=\"external\"\n"
    "      access=\"public\"\n"
    "      category=\"recpointer\"\n"
    "      >\n"
    "  </Field>\n"
    "  <Field\n"
    "      name=\"globalUrl\"\n"
    "      type=\"std::string\"\n"
    "      cardinality=\"multi\"\n"
    "      visibility=\"external\"\n"
    "      access=\"public\"\n"
    "      >\n"
    "  </Field>\n"
    "  <Field\n"
    "      name=\"matchedGlobalUrl\"\n"
    "      type=\"std::string\"\n"
    "      cardinality=\"single\"\n"
    "      visibility=\"external\"\n"
    "      access=\"public\"\n"
    "      >\n"
    "  </Field>\n"
    "\n"
    "  <Field\n"
    "\t name=\"camera\"\n"
    "\t type=\"Camera\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"internal\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "     category=\"pointer\"\n"
    "\t >\n"
    "  </Field>\n"
    "\n"
    "  <Field\n"
    "      name=\"activeCamera\"\n"
    "      type=\"std::string\"\n"
    "      cardinality=\"single\"\n"
    "      visibility=\"external\"\n"
    "      access=\"public\"\n"
    "      >\n"
    "  </Field>\n"
    "\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &OSGSceneItemBase::getType(void)
{
    return _type;
}

const FieldContainerType &OSGSceneItemBase::getType(void) const
{
    return _type;
}

UInt32 OSGSceneItemBase::getContainerSize(void) const
{
    return sizeof(OSGSceneItem);
}

/*------------------------- decorator get ------------------------------*/


MFString *OSGSceneItemBase::editMFUrl(void)
{
    editMField(UrlFieldMask, _mfUrl);

    return &_mfUrl;
}

const MFString *OSGSceneItemBase::getMFUrl(void) const
{
    return &_mfUrl;
}


SFString *OSGSceneItemBase::editSFMatchedUrl(void)
{
    editSField(MatchedUrlFieldMask);

    return &_sfMatchedUrl;
}

const SFString *OSGSceneItemBase::getSFMatchedUrl(void) const
{
    return &_sfMatchedUrl;
}


//! Get the OSGSceneItem::_sfRoot field.
const SFUnrecNodePtr *OSGSceneItemBase::getSFRoot(void) const
{
    return &_sfRoot;
}

SFUnrecNodePtr      *OSGSceneItemBase::editSFRoot           (void)
{
    editSField(RootFieldMask);

    return &_sfRoot;
}

//! Get the value of the OSGSceneItem::_sfRoot field.
Node * OSGSceneItemBase::getRoot(void) const
{
    return _sfRoot.getValue();
}

//! Set the value of the OSGSceneItem::_sfRoot field.
void OSGSceneItemBase::setRoot(Node * const value)
{
    editSField(RootFieldMask);

    _sfRoot.setValue(value);
}


//! Get the OSGSceneItem::_mfGlobals field.
const MFRecFieldContainerPtr *OSGSceneItemBase::getMFGlobals(void) const
{
    return &_mfGlobals;
}

MFRecFieldContainerPtr *OSGSceneItemBase::editMFGlobals        (void)
{
    editMField(GlobalsFieldMask, _mfGlobals);

    return &_mfGlobals;
}
FieldContainer * OSGSceneItemBase::getGlobals(const UInt32 index) const
{
    return _mfGlobals[index];
}

MFString *OSGSceneItemBase::editMFGlobalUrl(void)
{
    editMField(GlobalUrlFieldMask, _mfGlobalUrl);

    return &_mfGlobalUrl;
}

const MFString *OSGSceneItemBase::getMFGlobalUrl(void) const
{
    return &_mfGlobalUrl;
}


SFString *OSGSceneItemBase::editSFMatchedGlobalUrl(void)
{
    editSField(MatchedGlobalUrlFieldMask);

    return &_sfMatchedGlobalUrl;
}

const SFString *OSGSceneItemBase::getSFMatchedGlobalUrl(void) const
{
    return &_sfMatchedGlobalUrl;
}


//! Get the OSGSceneItem::_sfCamera field.
const SFUnrecCameraPtr *OSGSceneItemBase::getSFCamera(void) const
{
    return &_sfCamera;
}

SFUnrecCameraPtr    *OSGSceneItemBase::editSFCamera         (void)
{
    editSField(CameraFieldMask);

    return &_sfCamera;
}

//! Get the value of the OSGSceneItem::_sfCamera field.
Camera * OSGSceneItemBase::getCamera(void) const
{
    return _sfCamera.getValue();
}

//! Set the value of the OSGSceneItem::_sfCamera field.
void OSGSceneItemBase::setCamera(Camera * const value)
{
    editSField(CameraFieldMask);

    _sfCamera.setValue(value);
}


SFString *OSGSceneItemBase::editSFActiveCamera(void)
{
    editSField(ActiveCameraFieldMask);

    return &_sfActiveCamera;
}

const SFString *OSGSceneItemBase::getSFActiveCamera(void) const
{
    return &_sfActiveCamera;
}




void OSGSceneItemBase::pushToGlobals(FieldContainer * const value)
{
    editMField(GlobalsFieldMask, _mfGlobals);

    _mfGlobals.push_back(value);
}

void OSGSceneItemBase::assignGlobals  (const MFRecFieldContainerPtr &value)
{
    MFRecFieldContainerPtr::const_iterator elemIt  =
        value.begin();
    MFRecFieldContainerPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<OSGSceneItem *>(this)->clearGlobals();

    while(elemIt != elemEnd)
    {
        this->pushToGlobals(*elemIt);

        ++elemIt;
    }
}

void OSGSceneItemBase::removeFromGlobals(UInt32 uiIndex)
{
    if(uiIndex < _mfGlobals.size())
    {
        editMField(GlobalsFieldMask, _mfGlobals);

        _mfGlobals.erase(uiIndex);
    }
}

void OSGSceneItemBase::removeObjFromGlobals(FieldContainer * const value)
{
    Int32 iElemIdx = _mfGlobals.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(GlobalsFieldMask, _mfGlobals);

        _mfGlobals.erase(iElemIdx);
    }
}
void OSGSceneItemBase::clearGlobals(void)
{
    editMField(GlobalsFieldMask, _mfGlobals);


    _mfGlobals.clear();
}



/*------------------------------ access -----------------------------------*/

SizeT OSGSceneItemBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (UrlFieldMask & whichField))
    {
        returnValue += _mfUrl.getBinSize();
    }
    if(FieldBits::NoField != (MatchedUrlFieldMask & whichField))
    {
        returnValue += _sfMatchedUrl.getBinSize();
    }
    if(FieldBits::NoField != (RootFieldMask & whichField))
    {
        returnValue += _sfRoot.getBinSize();
    }
    if(FieldBits::NoField != (GlobalsFieldMask & whichField))
    {
        returnValue += _mfGlobals.getBinSize();
    }
    if(FieldBits::NoField != (GlobalUrlFieldMask & whichField))
    {
        returnValue += _mfGlobalUrl.getBinSize();
    }
    if(FieldBits::NoField != (MatchedGlobalUrlFieldMask & whichField))
    {
        returnValue += _sfMatchedGlobalUrl.getBinSize();
    }
    if(FieldBits::NoField != (CameraFieldMask & whichField))
    {
        returnValue += _sfCamera.getBinSize();
    }
    if(FieldBits::NoField != (ActiveCameraFieldMask & whichField))
    {
        returnValue += _sfActiveCamera.getBinSize();
    }

    return returnValue;
}

void OSGSceneItemBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (UrlFieldMask & whichField))
    {
        _mfUrl.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MatchedUrlFieldMask & whichField))
    {
        _sfMatchedUrl.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RootFieldMask & whichField))
    {
        _sfRoot.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GlobalsFieldMask & whichField))
    {
        _mfGlobals.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GlobalUrlFieldMask & whichField))
    {
        _mfGlobalUrl.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MatchedGlobalUrlFieldMask & whichField))
    {
        _sfMatchedGlobalUrl.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CameraFieldMask & whichField))
    {
        _sfCamera.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ActiveCameraFieldMask & whichField))
    {
        _sfActiveCamera.copyToBin(pMem);
    }
}

void OSGSceneItemBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (UrlFieldMask & whichField))
    {
        editMField(UrlFieldMask, _mfUrl);
        _mfUrl.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MatchedUrlFieldMask & whichField))
    {
        editSField(MatchedUrlFieldMask);
        _sfMatchedUrl.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RootFieldMask & whichField))
    {
        editSField(RootFieldMask);
        _sfRoot.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GlobalsFieldMask & whichField))
    {
        editMField(GlobalsFieldMask, _mfGlobals);
        _mfGlobals.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GlobalUrlFieldMask & whichField))
    {
        editMField(GlobalUrlFieldMask, _mfGlobalUrl);
        _mfGlobalUrl.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MatchedGlobalUrlFieldMask & whichField))
    {
        editSField(MatchedGlobalUrlFieldMask);
        _sfMatchedGlobalUrl.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CameraFieldMask & whichField))
    {
        editSField(CameraFieldMask);
        _sfCamera.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ActiveCameraFieldMask & whichField))
    {
        editSField(ActiveCameraFieldMask);
        _sfActiveCamera.copyFromBin(pMem);
    }
}

//! create a new instance of the class
OSGSceneItemTransitPtr OSGSceneItemBase::createLocal(BitVector bFlags)
{
    OSGSceneItemTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<OSGSceneItem>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
OSGSceneItemTransitPtr OSGSceneItemBase::createDependent(BitVector bFlags)
{
    OSGSceneItemTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<OSGSceneItem>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
OSGSceneItemTransitPtr OSGSceneItemBase::create(void)
{
    return createLocal();
}

OSGSceneItem *OSGSceneItemBase::createEmptyLocal(BitVector bFlags)
{
    OSGSceneItem *returnValue;

    newPtr<OSGSceneItem>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
OSGSceneItem *OSGSceneItemBase::createEmpty(void)
{
    return createEmptyLocal();
}


FieldContainerTransitPtr OSGSceneItemBase::shallowCopyLocal(
    BitVector bFlags) const
{
    OSGSceneItem *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const OSGSceneItem *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr OSGSceneItemBase::shallowCopyDependent(
    BitVector bFlags) const
{
    OSGSceneItem *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const OSGSceneItem *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr OSGSceneItemBase::shallowCopy(void) const
{
    return shallowCopyLocal();
}




/*------------------------- constructors ----------------------------------*/

OSGSceneItemBase::OSGSceneItemBase(void) :
    Inherited(),
    _mfUrl                    (),
    _sfMatchedUrl             (),
    _sfRoot                   (NULL),
    _mfGlobals                (),
    _mfGlobalUrl              (),
    _sfMatchedGlobalUrl       (),
    _sfCamera                 (NULL),
    _sfActiveCamera           ()
{
}

OSGSceneItemBase::OSGSceneItemBase(const OSGSceneItemBase &source) :
    Inherited(source),
    _mfUrl                    (source._mfUrl                    ),
    _sfMatchedUrl             (source._sfMatchedUrl             ),
    _sfRoot                   (NULL),
    _mfGlobals                (),
    _mfGlobalUrl              (source._mfGlobalUrl              ),
    _sfMatchedGlobalUrl       (source._sfMatchedGlobalUrl       ),
    _sfCamera                 (NULL),
    _sfActiveCamera           (source._sfActiveCamera           )
{
}


/*-------------------------- destructors ----------------------------------*/

OSGSceneItemBase::~OSGSceneItemBase(void)
{
}

void OSGSceneItemBase::onCreate(const OSGSceneItem *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        OSGSceneItem *pThis = static_cast<OSGSceneItem *>(this);

        pThis->setRoot(source->getRoot());

        MFRecFieldContainerPtr::const_iterator GlobalsIt  =
            source->_mfGlobals.begin();
        MFRecFieldContainerPtr::const_iterator GlobalsEnd =
            source->_mfGlobals.end  ();

        while(GlobalsIt != GlobalsEnd)
        {
            pThis->pushToGlobals(*GlobalsIt);

            ++GlobalsIt;
        }

        pThis->setCamera(source->getCamera());
    }
}

GetFieldHandlePtr OSGSceneItemBase::getHandleUrl             (void) const
{
    MFString::GetHandlePtr returnValue(
        new  MFString::GetHandle(
             &_mfUrl,
             this->getType().getFieldDesc(UrlFieldId),
             const_cast<OSGSceneItemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr OSGSceneItemBase::editHandleUrl            (void)
{
    MFString::EditHandlePtr returnValue(
        new  MFString::EditHandle(
             &_mfUrl,
             this->getType().getFieldDesc(UrlFieldId),
             this));


    editMField(UrlFieldMask, _mfUrl);

    return returnValue;
}

GetFieldHandlePtr OSGSceneItemBase::getHandleMatchedUrl      (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfMatchedUrl,
             this->getType().getFieldDesc(MatchedUrlFieldId),
             const_cast<OSGSceneItemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr OSGSceneItemBase::editHandleMatchedUrl     (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfMatchedUrl,
             this->getType().getFieldDesc(MatchedUrlFieldId),
             this));


    editSField(MatchedUrlFieldMask);

    return returnValue;
}

GetFieldHandlePtr OSGSceneItemBase::getHandleRoot            (void) const
{
    SFUnrecNodePtr::GetHandlePtr returnValue(
        new  SFUnrecNodePtr::GetHandle(
             &_sfRoot,
             this->getType().getFieldDesc(RootFieldId),
             const_cast<OSGSceneItemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr OSGSceneItemBase::editHandleRoot           (void)
{
    SFUnrecNodePtr::EditHandlePtr returnValue(
        new  SFUnrecNodePtr::EditHandle(
             &_sfRoot,
             this->getType().getFieldDesc(RootFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&OSGSceneItem::setRoot,
                    static_cast<OSGSceneItem *>(this), _1));

    editSField(RootFieldMask);

    return returnValue;
}

GetFieldHandlePtr OSGSceneItemBase::getHandleGlobals         (void) const
{
    MFRecFieldContainerPtr::GetHandlePtr returnValue(
        new  MFRecFieldContainerPtr::GetHandle(
             &_mfGlobals,
             this->getType().getFieldDesc(GlobalsFieldId),
             const_cast<OSGSceneItemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr OSGSceneItemBase::editHandleGlobals        (void)
{
    MFRecFieldContainerPtr::EditHandlePtr returnValue(
        new  MFRecFieldContainerPtr::EditHandle(
             &_mfGlobals,
             this->getType().getFieldDesc(GlobalsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&OSGSceneItem::pushToGlobals,
                    static_cast<OSGSceneItem *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&OSGSceneItem::removeFromGlobals,
                    static_cast<OSGSceneItem *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&OSGSceneItem::removeObjFromGlobals,
                    static_cast<OSGSceneItem *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&OSGSceneItem::clearGlobals,
                    static_cast<OSGSceneItem *>(this)));

    editMField(GlobalsFieldMask, _mfGlobals);

    return returnValue;
}

GetFieldHandlePtr OSGSceneItemBase::getHandleGlobalUrl       (void) const
{
    MFString::GetHandlePtr returnValue(
        new  MFString::GetHandle(
             &_mfGlobalUrl,
             this->getType().getFieldDesc(GlobalUrlFieldId),
             const_cast<OSGSceneItemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr OSGSceneItemBase::editHandleGlobalUrl      (void)
{
    MFString::EditHandlePtr returnValue(
        new  MFString::EditHandle(
             &_mfGlobalUrl,
             this->getType().getFieldDesc(GlobalUrlFieldId),
             this));


    editMField(GlobalUrlFieldMask, _mfGlobalUrl);

    return returnValue;
}

GetFieldHandlePtr OSGSceneItemBase::getHandleMatchedGlobalUrl (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfMatchedGlobalUrl,
             this->getType().getFieldDesc(MatchedGlobalUrlFieldId),
             const_cast<OSGSceneItemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr OSGSceneItemBase::editHandleMatchedGlobalUrl(void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfMatchedGlobalUrl,
             this->getType().getFieldDesc(MatchedGlobalUrlFieldId),
             this));


    editSField(MatchedGlobalUrlFieldMask);

    return returnValue;
}

GetFieldHandlePtr OSGSceneItemBase::getHandleCamera          (void) const
{
    SFUnrecCameraPtr::GetHandlePtr returnValue(
        new  SFUnrecCameraPtr::GetHandle(
             &_sfCamera,
             this->getType().getFieldDesc(CameraFieldId),
             const_cast<OSGSceneItemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr OSGSceneItemBase::editHandleCamera         (void)
{
    SFUnrecCameraPtr::EditHandlePtr returnValue(
        new  SFUnrecCameraPtr::EditHandle(
             &_sfCamera,
             this->getType().getFieldDesc(CameraFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&OSGSceneItem::setCamera,
                    static_cast<OSGSceneItem *>(this), _1));

    editSField(CameraFieldMask);

    return returnValue;
}

GetFieldHandlePtr OSGSceneItemBase::getHandleActiveCamera    (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfActiveCamera,
             this->getType().getFieldDesc(ActiveCameraFieldId),
             const_cast<OSGSceneItemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr OSGSceneItemBase::editHandleActiveCamera   (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfActiveCamera,
             this->getType().getFieldDesc(ActiveCameraFieldId),
             this));


    editSField(ActiveCameraFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void OSGSceneItemBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    OSGSceneItem *pThis = static_cast<OSGSceneItem *>(this);

    pThis->execSync(static_cast<OSGSceneItem *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *OSGSceneItemBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    OSGSceneItem *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const OSGSceneItem *>(pRefAspect),
                  dynamic_cast<const OSGSceneItem *>(this));

    return returnValue;
}
#endif

void OSGSceneItemBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<OSGSceneItem *>(this)->setRoot(NULL);

    static_cast<OSGSceneItem *>(this)->clearGlobals();

    static_cast<OSGSceneItem *>(this)->setCamera(NULL);

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfUrl.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfGlobalUrl.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


VCORE_END_NAMESPACE
