/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class VCoreWindow!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#include "OSGConfig.h"



#include "OSGVCoreViewarea.h"           // Views Class

#include "OSGVCoreWindowBase.h"
#include "OSGVCoreWindow.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::VCoreWindow
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var VCoreViewarea * VCoreWindowBase::_mfViews
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<VCoreWindow *>::_type("VCoreWindowPtr", "VCoreItemPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(VCoreWindow *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           VCoreWindow *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           VCoreWindow *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void VCoreWindowBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUnrecVCoreViewareaPtr::Description(
        MFUnrecVCoreViewareaPtr::getClassType(),
        "views",
        "",
        ViewsFieldId, ViewsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&VCoreWindow::editHandleViews),
        static_cast<FieldGetMethodSig >(&VCoreWindow::getHandleViews));

    oType.addInitialDesc(pDesc);
}


VCoreWindowBase::TypeObject VCoreWindowBase::_type(
    VCoreWindowBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&VCoreWindowBase::createEmptyLocal),
    VCoreWindow::initMethod,
    VCoreWindow::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&VCoreWindow::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\" ?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"VCoreWindow\"\n"
    "    parent=\"VCoreItem\"\n"
    "    library=\"VCoreSystem\"\n"
    "    structure=\"concrete\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    isNodeCore=\"false\"\n"
    "    isBundle=\"true\"\n"
    "    docGroupBase=\"GrpVCoreSystem\"\n"
    "    >\n"
    "  <Field\n"
    "      name=\"views\"\n"
    "      type=\"VCoreViewarea\"\n"
    "      cardinality=\"multi\"\n"
    "      visibility=\"external\"\n"
    "      access=\"public\"\n"
    "      category=\"pointer\"\n"
    "      >\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &VCoreWindowBase::getType(void)
{
    return _type;
}

const FieldContainerType &VCoreWindowBase::getType(void) const
{
    return _type;
}

UInt32 VCoreWindowBase::getContainerSize(void) const
{
    return sizeof(VCoreWindow);
}

/*------------------------- decorator get ------------------------------*/


//! Get the VCoreWindow::_mfViews field.
const MFUnrecVCoreViewareaPtr *VCoreWindowBase::getMFViews(void) const
{
    return &_mfViews;
}

MFUnrecVCoreViewareaPtr *VCoreWindowBase::editMFViews          (void)
{
    editMField(ViewsFieldMask, _mfViews);

    return &_mfViews;
}



void VCoreWindowBase::pushToViews(VCoreViewarea * const value)
{
    editMField(ViewsFieldMask, _mfViews);

    _mfViews.push_back(value);
}

void VCoreWindowBase::assignViews    (const MFUnrecVCoreViewareaPtr &value)
{
    MFUnrecVCoreViewareaPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecVCoreViewareaPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<VCoreWindow *>(this)->clearViews();

    while(elemIt != elemEnd)
    {
        this->pushToViews(*elemIt);

        ++elemIt;
    }
}

void VCoreWindowBase::removeFromViews(UInt32 uiIndex)
{
    if(uiIndex < _mfViews.size())
    {
        editMField(ViewsFieldMask, _mfViews);

        _mfViews.erase(uiIndex);
    }
}

void VCoreWindowBase::removeObjFromViews(VCoreViewarea * const value)
{
    Int32 iElemIdx = _mfViews.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ViewsFieldMask, _mfViews);

        _mfViews.erase(iElemIdx);
    }
}
void VCoreWindowBase::clearViews(void)
{
    editMField(ViewsFieldMask, _mfViews);


    _mfViews.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 VCoreWindowBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ViewsFieldMask & whichField))
    {
        returnValue += _mfViews.getBinSize();
    }

    return returnValue;
}

void VCoreWindowBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ViewsFieldMask & whichField))
    {
        _mfViews.copyToBin(pMem);
    }
}

void VCoreWindowBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ViewsFieldMask & whichField))
    {
        editMField(ViewsFieldMask, _mfViews);
        _mfViews.copyFromBin(pMem);
    }
}

//! create a new instance of the class
VCoreWindowTransitPtr VCoreWindowBase::createLocal(BitVector bFlags)
{
    VCoreWindowTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<VCoreWindow>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
VCoreWindowTransitPtr VCoreWindowBase::createDependent(BitVector bFlags)
{
    VCoreWindowTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<VCoreWindow>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
VCoreWindowTransitPtr VCoreWindowBase::create(void)
{
    return createLocal();
}

VCoreWindow *VCoreWindowBase::createEmptyLocal(BitVector bFlags)
{
    VCoreWindow *returnValue;

    newPtr<VCoreWindow>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
VCoreWindow *VCoreWindowBase::createEmpty(void)
{
    return createEmptyLocal();
}


FieldContainerTransitPtr VCoreWindowBase::shallowCopyLocal(
    BitVector bFlags) const
{
    VCoreWindow *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const VCoreWindow *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr VCoreWindowBase::shallowCopyDependent(
    BitVector bFlags) const
{
    VCoreWindow *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const VCoreWindow *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr VCoreWindowBase::shallowCopy(void) const
{
    return shallowCopyLocal();
}




/*------------------------- constructors ----------------------------------*/

VCoreWindowBase::VCoreWindowBase(void) :
    Inherited(),
    _mfViews                  ()
{
}

VCoreWindowBase::VCoreWindowBase(const VCoreWindowBase &source) :
    Inherited(source),
    _mfViews                  ()
{
}


/*-------------------------- destructors ----------------------------------*/

VCoreWindowBase::~VCoreWindowBase(void)
{
}

void VCoreWindowBase::onCreate(const VCoreWindow *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        VCoreWindow *pThis = static_cast<VCoreWindow *>(this);

        MFUnrecVCoreViewareaPtr::const_iterator ViewsIt  =
            source->_mfViews.begin();
        MFUnrecVCoreViewareaPtr::const_iterator ViewsEnd =
            source->_mfViews.end  ();

        while(ViewsIt != ViewsEnd)
        {
            pThis->pushToViews(*ViewsIt);

            ++ViewsIt;
        }
    }
}

GetFieldHandlePtr VCoreWindowBase::getHandleViews           (void) const
{
    MFUnrecVCoreViewareaPtr::GetHandlePtr returnValue(
        new  MFUnrecVCoreViewareaPtr::GetHandle(
             &_mfViews,
             this->getType().getFieldDesc(ViewsFieldId),
             const_cast<VCoreWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VCoreWindowBase::editHandleViews          (void)
{
    MFUnrecVCoreViewareaPtr::EditHandlePtr returnValue(
        new  MFUnrecVCoreViewareaPtr::EditHandle(
             &_mfViews,
             this->getType().getFieldDesc(ViewsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&VCoreWindow::pushToViews,
                    static_cast<VCoreWindow *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&VCoreWindow::removeFromViews,
                    static_cast<VCoreWindow *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&VCoreWindow::removeObjFromViews,
                    static_cast<VCoreWindow *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&VCoreWindow::clearViews,
                    static_cast<VCoreWindow *>(this)));

    editMField(ViewsFieldMask, _mfViews);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void VCoreWindowBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    VCoreWindow *pThis = static_cast<VCoreWindow *>(this);

    pThis->execSync(static_cast<VCoreWindow *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *VCoreWindowBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    VCoreWindow *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const VCoreWindow *>(pRefAspect),
                  dynamic_cast<const VCoreWindow *>(this));

    return returnValue;
}
#endif

void VCoreWindowBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<VCoreWindow *>(this)->clearViews();


}


OSG_END_NAMESPACE
