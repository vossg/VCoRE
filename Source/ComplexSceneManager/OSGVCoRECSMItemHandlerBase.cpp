/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class CSMItemHandler!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#include "OSGConfig.h"



#include "OSGVCoREOSGBaseItem.h"        // Item Class

#include "OSGVCoRECSMItemHandlerBase.h"
#include "OSGVCoRECSMItemHandler.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

VCORE_IMPORT_NAMESPACE;

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::CSMItemHandler
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var OSGBaseItem *   CSMItemHandlerBase::_sfItem
    
*/

/*! \var AspectId        CSMItemHandlerBase::_sfAspect
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<CSMItemHandler *, nsVCoRE>::_type(
    "CSMItemHandlerPtr", 
    "NodeCorePtr", 
    CSMItemHandler::getClassType(),
    nsVCoRE);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(CSMItemHandler *, nsVCoRE)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           CSMItemHandler *,
                           nsVCoRE);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           CSMItemHandler *,
                           nsVCoRE);

OSG_END_NAMESPACE

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

VCORE_BEGIN_NAMESPACE

OSG_IMPORT_NAMESPACE;

void CSMItemHandlerBase::classDescInserter(TypeObject &oType)
{
    Inherited::classDescInserter(oType);

    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecChildOSGBaseItemPtr::Description(
        SFUnrecChildOSGBaseItemPtr::getClassType(),
        "item",
        "",
        ItemFieldId, ItemFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CSMItemHandler::editHandleItem),
        static_cast<FieldGetMethodSig >(&CSMItemHandler::getHandleItem));

    oType.addInitialDesc(pDesc);

    pDesc = new SFAspectId::Description(
        SFAspectId::getClassType(),
        "aspect",
        "",
        AspectFieldId, AspectFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CSMItemHandler::editHandleAspect),
        static_cast<FieldGetMethodSig >(&CSMItemHandler::getHandleAspect));

    oType.addInitialDesc(pDesc);
}


CSMItemHandlerBase::TypeObject CSMItemHandlerBase::_type(
    CSMItemHandlerBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsVCoRE, //Namespace
    reinterpret_cast<PrototypeCreateF>(&CSMItemHandlerBase::createEmptyLocal),
    CSMItemHandler::initMethod,
    CSMItemHandler::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&CSMItemHandler::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\" ?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"CSMItemHandler\"\n"
    "    parent=\"NodeCore\"\n"
    "    mixinparent=\"NodeCoreProducerParent\"\n"
    "    parentnamespace=\"OSG\"\n"
    "    library=\"VCoRECSM\"\n"
    "    structure=\"concrete\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    isNodeCore=\"true\"\n"
    "    isBundle=\"false\"\n"
    "    docGroupBase=\"GrpVCoreCSM\"\n"
    "    libnamespace=\"VCoRE\"\n"
    "   >\n"
    "  <Field\n"
    "      name=\"item\"\n"
    "      type=\"VCoRE::OSGBaseItem\"\n"
    "      cardinality=\"single\"\n"
    "      visibility=\"external\"\n"
    "      access=\"public\"\n"
    "      category=\"childpointer\"\n"
    "      childParentType=\"FieldContainer\"\n"
    "      linkParentField=\"Parent\"\n"
    "      >\n"
    "  </Field>\n"
    "  <Field\n"
    "      name=\"aspect\"\n"
    "      type=\"AspectId\"\n"
    "      cardinality=\"single\"\n"
    "      visibility=\"external\"\n"
    "      access=\"public\"\n"
    "      defaultValue=\"1\"\n"
    "      >\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &CSMItemHandlerBase::getType(void)
{
    return _type;
}

const FieldContainerType &CSMItemHandlerBase::getType(void) const
{
    return _type;
}

UInt32 CSMItemHandlerBase::getContainerSize(void) const
{
    return sizeof(CSMItemHandler);
}

/*------------------------- decorator get ------------------------------*/


//! Get the CSMItemHandler::_sfItem field.
const SFUnrecChildOSGBaseItemPtr *CSMItemHandlerBase::getSFItem(void) const
{
    return &_sfItem;
}

SFUnrecChildOSGBaseItemPtr *CSMItemHandlerBase::editSFItem           (void)
{
    editSField(ItemFieldMask);

    return &_sfItem;
}

SFAspectId *CSMItemHandlerBase::editSFAspect(void)
{
    editSField(AspectFieldMask);

    return &_sfAspect;
}

const SFAspectId *CSMItemHandlerBase::getSFAspect(void) const
{
    return &_sfAspect;
}






/*------------------------------ access -----------------------------------*/

SizeT CSMItemHandlerBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ItemFieldMask & whichField))
    {
        returnValue += _sfItem.getBinSize();
    }
    if(FieldBits::NoField != (AspectFieldMask & whichField))
    {
        returnValue += _sfAspect.getBinSize();
    }

    return returnValue;
}

void CSMItemHandlerBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ItemFieldMask & whichField))
    {
        _sfItem.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AspectFieldMask & whichField))
    {
        _sfAspect.copyToBin(pMem);
    }
}

void CSMItemHandlerBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ItemFieldMask & whichField))
    {
        editSField(ItemFieldMask);
        _sfItem.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AspectFieldMask & whichField))
    {
        editSField(AspectFieldMask);
        _sfAspect.copyFromBin(pMem);
    }
}

//! create a new instance of the class
CSMItemHandlerTransitPtr CSMItemHandlerBase::createLocal(BitVector bFlags)
{
    CSMItemHandlerTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<CSMItemHandler>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
CSMItemHandlerTransitPtr CSMItemHandlerBase::createDependent(BitVector bFlags)
{
    CSMItemHandlerTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<CSMItemHandler>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
CSMItemHandlerTransitPtr CSMItemHandlerBase::create(void)
{
    CSMItemHandlerTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<CSMItemHandler>(tmpPtr);
    }

    return fc;
}

CSMItemHandler *CSMItemHandlerBase::createEmptyLocal(BitVector bFlags)
{
    CSMItemHandler *returnValue;

    newPtr<CSMItemHandler>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
CSMItemHandler *CSMItemHandlerBase::createEmpty(void)
{
    CSMItemHandler *returnValue;

    newPtr<CSMItemHandler>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr CSMItemHandlerBase::shallowCopyLocal(
    BitVector bFlags) const
{
    CSMItemHandler *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const CSMItemHandler *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr CSMItemHandlerBase::shallowCopyDependent(
    BitVector bFlags) const
{
    CSMItemHandler *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const CSMItemHandler *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr CSMItemHandlerBase::shallowCopy(void) const
{
    CSMItemHandler *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const CSMItemHandler *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

CSMItemHandlerBase::CSMItemHandlerBase(void) :
    Inherited(),
    _sfItem                   (this,
                          ItemFieldId,
                          OSGBaseItem::ParentFieldId),
    _sfAspect                 (AspectId(1))
{
}

CSMItemHandlerBase::CSMItemHandlerBase(const CSMItemHandlerBase &source) :
    Inherited(source),
    _sfItem                   (this,
                          ItemFieldId,
                          OSGBaseItem::ParentFieldId),
    _sfAspect                 (source._sfAspect                 )
{
}


/*-------------------------- destructors ----------------------------------*/

CSMItemHandlerBase::~CSMItemHandlerBase(void)
{
}

/*-------------------------------------------------------------------------*/
/* Child linking                                                           */

bool CSMItemHandlerBase::unlinkChild(
    FieldContainer * const pChild,
    UInt16           const childFieldId)
{
    if(childFieldId == ItemFieldId)
    {
        OSGBaseItem * pTypedChild =
            dynamic_cast<OSGBaseItem *>(pChild);

        if(pTypedChild != NULL)
        {
            if(_sfItem.getValue() == pTypedChild)
            {
                editSField(ItemFieldMask);

                _sfItem.setValue(NULL);

                return true;
            }

            SWARNING << "Parent (["        << this
                     << "] id ["           << this->getId()
                     << "] type ["         << this->getType().getCName()
                     << "] childFieldId [" << childFieldId
                     << "]) - Child (["    << pChild
                     << "] id ["           << pChild->getId()
                     << "] type ["         << pChild->getType().getCName()
                     << "]): link inconsistent!"
                     << std::endl;

            return false;
        }

        return false;
    }


    return Inherited::unlinkChild(pChild, childFieldId);
}

void CSMItemHandlerBase::onCreate(const CSMItemHandler *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        CSMItemHandler *pThis = static_cast<CSMItemHandler *>(this);

        pThis->setItem(source->getItem());
    }
}

GetFieldHandlePtr CSMItemHandlerBase::getHandleItem            (void) const
{
    SFUnrecChildOSGBaseItemPtr::GetHandlePtr returnValue(
        new  SFUnrecChildOSGBaseItemPtr::GetHandle(
             &_sfItem,
             this->getType().getFieldDesc(ItemFieldId),
             const_cast<CSMItemHandlerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr CSMItemHandlerBase::editHandleItem           (void)
{
    SFUnrecChildOSGBaseItemPtr::EditHandlePtr returnValue(
        new  SFUnrecChildOSGBaseItemPtr::EditHandle(
             &_sfItem,
             this->getType().getFieldDesc(ItemFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&CSMItemHandler::setItem,
                    static_cast<CSMItemHandler *>(this), _1));

    editSField(ItemFieldMask);

    return returnValue;
}

GetFieldHandlePtr CSMItemHandlerBase::getHandleAspect          (void) const
{
    SFAspectId::GetHandlePtr returnValue(
        new  SFAspectId::GetHandle(
             &_sfAspect,
             this->getType().getFieldDesc(AspectFieldId),
             const_cast<CSMItemHandlerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr CSMItemHandlerBase::editHandleAspect         (void)
{
    SFAspectId::EditHandlePtr returnValue(
        new  SFAspectId::EditHandle(
             &_sfAspect,
             this->getType().getFieldDesc(AspectFieldId),
             this));


    editSField(AspectFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void CSMItemHandlerBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    CSMItemHandler *pThis = static_cast<CSMItemHandler *>(this);

    pThis->execSync(static_cast<CSMItemHandler *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *CSMItemHandlerBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    CSMItemHandler *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const CSMItemHandler *>(pRefAspect),
                  dynamic_cast<const CSMItemHandler *>(this));

    return returnValue;
}
#endif

void CSMItemHandlerBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<CSMItemHandler *>(this)->setItem(NULL);


}


VCORE_END_NAMESPACE
