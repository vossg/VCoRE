/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class VCRenderer!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#include "OSGConfig.h"



#include "OSGWindow.h"                  // Windows Class
#include "OSGVCoREVCRenderTask.h"       // RenderTasks Class

#include "OSGVCoREVCRendererBase.h"
#include "OSGVCoREVCRenderer.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

VCORE_IMPORT_NAMESPACE;

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::VCRenderer
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Window *        VCRendererBase::_mfWindows
    
*/

/*! \var VCRenderTask *  VCRendererBase::_mfRenderTasks
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<VCRenderer *, nsVCoRE>::_type(
    "VCRendererPtr", 
    "ItemPtr", 
    VCRenderer::getClassType(),
    nsVCoRE);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(VCRenderer *, nsVCoRE)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           VCRenderer *,
                           nsVCoRE);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           VCRenderer *,
                           nsVCoRE);

OSG_END_NAMESPACE

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

VCORE_BEGIN_NAMESPACE

OSG_IMPORT_NAMESPACE;

void VCRendererBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUnrecWindowPtr::Description(
        MFUnrecWindowPtr::getClassType(),
        "windows",
        "",
        WindowsFieldId, WindowsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FNullCheckAccess),
        static_cast<FieldEditMethodSig>(&VCRenderer::editHandleWindows),
        static_cast<FieldGetMethodSig >(&VCRenderer::getHandleWindows));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecVCRenderTaskPtr::Description(
        MFUnrecVCRenderTaskPtr::getClassType(),
        "renderTasks",
        "",
        RenderTasksFieldId, RenderTasksFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FNullCheckAccess),
        static_cast<FieldEditMethodSig>(&VCRenderer::editHandleRenderTasks),
        static_cast<FieldGetMethodSig >(&VCRenderer::getHandleRenderTasks));

    oType.addInitialDesc(pDesc);
}


VCRendererBase::TypeObject VCRendererBase::_type(
    VCRendererBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsVCoRE, //Namespace
    reinterpret_cast<PrototypeCreateF>(&VCRendererBase::createEmptyLocal),
    VCRenderer::initMethod,
    VCRenderer::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&VCRenderer::classDescInserter),
    true,
    0,
    "<?xml version=\"1.0\" ?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"VCRenderer\"\n"
    "   parent=\"Item\"\n"
    "   library=\"VCoRERenderer\"\n"
    "   structure=\"concrete\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   isNodeCore=\"true\"\n"
    "   docGroupBase=\"GrpVCoreRenderer\"\n"
    "   typeDescAddable=\"true\"\n"
    "   dynFCDerived=\"true\"\n"
    "   libnamespace=\"VCoRE\"\n"
    "   >\n"
    "    <Field\n"
    "        name=\"windows\"\n"
    "        type=\"Window\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        category=\"pointer\"\n"
    "        pushToFieldAs=\"addWindow\"\n"
    "        insertIntoMFieldAs=\"insertWindow\"\n"
    "        replaceInMFieldIndexAs=\"replaceWindow\"\n"
    "        replaceInMFieldObjectAs=\"replaceWindowByObj\"\n"
    "        removeFromMFieldIndexAs=\"subWindow\"\n"
    "        removeFromMFieldObjectAs=\"subWindowByObj\"\n"
    "        clearFieldAs=\"clearWindows\"        \n"
    "        ptrFieldAccess = \"nullCheck\"\n"
    "        fieldHeader=\"OSGWindow.h\"\n"
    "        typeHeader=\"OSGWindow.h\"\n"
    "    >\n"
    "    </Field>\n"
    "   <Field\n"
    "        name=\"renderTasks\"\n"
    "        type=\"VCoRE::VCRenderTask\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        pushToFieldAs=\"addRenderTask\"\n"
    "        removeFromMFieldIndexAs=\"subRenderTask\"\n"
    "        clearFieldAs=\"clearRenderTasks\"        \n"
    "        category=\"pointer\"\n"
    "        ptrFieldAccess = \"nullCheck\"\n"
    "        fieldHeader=\"OSGVCoREVCRenderTask.h\"\n"
    "        typeHeader=\"OSGVCoREVCRenderTask.h\"\n"
    "     >\n"
    "  </Field>\n"
    "\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &VCRendererBase::getType(void)
{
    return _localType;
}

const FieldContainerType &VCRendererBase::getType(void) const
{
    return _localType;
}

UInt32 VCRendererBase::getContainerSize(void) const
{
    return sizeof(VCRenderer);
}

VCRendererBase::TypeObject &VCRendererBase::getFinalType(void)
{
    return _type;
}

const VCRendererBase::TypeObject &VCRendererBase::getFinalType(void) const
{
    return _type;
}

/*------------------------- decorator get ------------------------------*/


//! Get the VCRenderer::_mfWindows field.
const MFUnrecWindowPtr *VCRendererBase::getMFWindows(void) const
{
    return &_mfWindows;
}

//! Get the VCRenderer::_mfRenderTasks field.
const MFUnrecVCRenderTaskPtr *VCRendererBase::getMFRenderTasks(void) const
{
    return &_mfRenderTasks;
}



void VCRendererBase::addWindow(Window * const value)
{
    if(value == NULL)
        return;

    editMField(WindowsFieldMask, _mfWindows);

    _mfWindows.push_back(value);
}

void VCRendererBase::assignWindows  (const MFUnrecWindowPtr  &value)
{
    MFUnrecWindowPtr ::const_iterator elemIt  =
        value.begin();
    MFUnrecWindowPtr ::const_iterator elemEnd =
        value.end  ();

    static_cast<VCRenderer *>(this)->clearWindows();

    while(elemIt != elemEnd)
    {
        this->addWindow(*elemIt);

        ++elemIt;
    }
}

void VCRendererBase::insertWindow(UInt32               uiIndex,
                                                   Window * const value   )
{
    if(value == NULL)
        return;

    editMField(WindowsFieldMask, _mfWindows);

    MFUnrecWindowPtr::iterator fieldIt = _mfWindows.begin_nc();

    fieldIt += uiIndex;

    _mfWindows.insert(fieldIt, value);
}

void VCRendererBase::replaceWindow(UInt32               uiIndex,
                                                       Window * const value   )
{
    if(value == NULL)
        return;

    if(uiIndex >= _mfWindows.size())
        return;

    editMField(WindowsFieldMask, _mfWindows);

    _mfWindows.replace(uiIndex, value);
}

void VCRendererBase::replaceWindowByObj(Window * const pOldElem,
                                                        Window * const pNewElem)
{
    if(pNewElem == NULL)
        return;

    Int32  elemIdx = _mfWindows.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(WindowsFieldMask, _mfWindows);

        _mfWindows.replace(elemIdx, pNewElem);
    }
}

void VCRendererBase::subWindow(UInt32 uiIndex)
{
    if(uiIndex < _mfWindows.size())
    {
        editMField(WindowsFieldMask, _mfWindows);

        _mfWindows.erase(uiIndex);
    }
}

void VCRendererBase::subWindowByObj(Window * const value)
{
    Int32 iElemIdx = _mfWindows.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(WindowsFieldMask, _mfWindows);

        _mfWindows.erase(iElemIdx);
    }
}
void VCRendererBase::clearWindows(void)
{
    editMField(WindowsFieldMask, _mfWindows);


    _mfWindows.clear();
}

void VCRendererBase::addRenderTask(VCRenderTask * const value)
{
    if(value == NULL)
        return;

    editMField(RenderTasksFieldMask, _mfRenderTasks);

    _mfRenderTasks.push_back(value);
}

void VCRendererBase::assignRenderTasks(const MFUnrecVCRenderTaskPtr &value)
{
    MFUnrecVCRenderTaskPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecVCRenderTaskPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<VCRenderer *>(this)->clearRenderTasks();

    while(elemIt != elemEnd)
    {
        this->addRenderTask(*elemIt);

        ++elemIt;
    }
}

void VCRendererBase::insertIntoRenderTasks(UInt32               uiIndex,
                                                   VCRenderTask * const value   )
{
    if(value == NULL)
        return;

    editMField(RenderTasksFieldMask, _mfRenderTasks);

    MFUnrecVCRenderTaskPtr::iterator fieldIt = _mfRenderTasks.begin_nc();

    fieldIt += uiIndex;

    _mfRenderTasks.insert(fieldIt, value);
}

void VCRendererBase::replaceInRenderTasks(UInt32               uiIndex,
                                                       VCRenderTask * const value   )
{
    if(value == NULL)
        return;

    if(uiIndex >= _mfRenderTasks.size())
        return;

    editMField(RenderTasksFieldMask, _mfRenderTasks);

    _mfRenderTasks.replace(uiIndex, value);
}

void VCRendererBase::replaceObjInRenderTasks(VCRenderTask * const pOldElem,
                                                        VCRenderTask * const pNewElem)
{
    if(pNewElem == NULL)
        return;

    Int32  elemIdx = _mfRenderTasks.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(RenderTasksFieldMask, _mfRenderTasks);

        _mfRenderTasks.replace(elemIdx, pNewElem);
    }
}

void VCRendererBase::subRenderTask(UInt32 uiIndex)
{
    if(uiIndex < _mfRenderTasks.size())
    {
        editMField(RenderTasksFieldMask, _mfRenderTasks);

        _mfRenderTasks.erase(uiIndex);
    }
}

void VCRendererBase::removeObjFromRenderTasks(VCRenderTask * const value)
{
    Int32 iElemIdx = _mfRenderTasks.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(RenderTasksFieldMask, _mfRenderTasks);

        _mfRenderTasks.erase(iElemIdx);
    }
}
void VCRendererBase::clearRenderTasks(void)
{
    editMField(RenderTasksFieldMask, _mfRenderTasks);


    _mfRenderTasks.clear();
}



/*------------------------------ access -----------------------------------*/

SizeT VCRendererBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (WindowsFieldMask & whichField))
    {
        returnValue += _mfWindows.getBinSize();
    }
    if(FieldBits::NoField != (RenderTasksFieldMask & whichField))
    {
        returnValue += _mfRenderTasks.getBinSize();
    }

    return returnValue;
}

void VCRendererBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (WindowsFieldMask & whichField))
    {
        _mfWindows.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RenderTasksFieldMask & whichField))
    {
        _mfRenderTasks.copyToBin(pMem);
    }
}

void VCRendererBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (WindowsFieldMask & whichField))
    {
        editMField(WindowsFieldMask, _mfWindows);
        _mfWindows.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RenderTasksFieldMask & whichField))
    {
        editMField(RenderTasksFieldMask, _mfRenderTasks);
        _mfRenderTasks.copyFromBin(pMem);
    }
}

//! create a new instance of the class
VCRendererTransitPtr VCRendererBase::createLocal(BitVector bFlags)
{
    VCRendererTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<VCRenderer>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
VCRendererTransitPtr VCRendererBase::createDependent(BitVector bFlags)
{
    VCRendererTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<VCRenderer>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
VCRendererTransitPtr VCRendererBase::create(void)
{
    VCRendererTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<VCRenderer>(tmpPtr);
    }

    return fc;
}

VCRenderer *VCRendererBase::createEmptyLocal(BitVector bFlags)
{
    VCRenderer *returnValue;

    newPtr<VCRenderer>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
VCRenderer *VCRendererBase::createEmpty(void)
{
    VCRenderer *returnValue;

    newPtr<VCRenderer>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr VCRendererBase::shallowCopyLocal(
    BitVector bFlags) const
{
    VCRenderer *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const VCRenderer *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr VCRendererBase::shallowCopyDependent(
    BitVector bFlags) const
{
    VCRenderer *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const VCRenderer *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr VCRendererBase::shallowCopy(void) const
{
    VCRenderer *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const VCRenderer *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

VCRendererBase::VCRendererBase(void) :
    Inherited(),
    _mfWindows                (),
    _mfRenderTasks            ()
{
}

VCRendererBase::VCRendererBase(const VCRendererBase &source) :
    Inherited(source),
    _mfWindows                (),
    _mfRenderTasks            ()
{
}


/*-------------------------- destructors ----------------------------------*/

VCRendererBase::~VCRendererBase(void)
{
}

void VCRendererBase::onCreate(const VCRenderer *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        VCRenderer *pThis = static_cast<VCRenderer *>(this);

        MFUnrecWindowPtr::const_iterator WindowsIt  =
            source->_mfWindows.begin();
        MFUnrecWindowPtr::const_iterator WindowsEnd =
            source->_mfWindows.end  ();

        while(WindowsIt != WindowsEnd)
        {
            pThis->addWindow(*WindowsIt);

            ++WindowsIt;
        }

        MFUnrecVCRenderTaskPtr::const_iterator RenderTasksIt  =
            source->_mfRenderTasks.begin();
        MFUnrecVCRenderTaskPtr::const_iterator RenderTasksEnd =
            source->_mfRenderTasks.end  ();

        while(RenderTasksIt != RenderTasksEnd)
        {
            pThis->addRenderTask(*RenderTasksIt);

            ++RenderTasksIt;
        }
    }
}

GetFieldHandlePtr VCRendererBase::getHandleWindows         (void) const
{
    MFUnrecWindowPtr::GetHandlePtr returnValue(
        new  MFUnrecWindowPtr::GetHandle(
             &_mfWindows,
             this->getType().getFieldDesc(WindowsFieldId),
             const_cast<VCRendererBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VCRendererBase::editHandleWindows        (void)
{
    MFUnrecWindowPtr::EditHandlePtr returnValue(
        new  MFUnrecWindowPtr::EditHandle(
             &_mfWindows,
             this->getType().getFieldDesc(WindowsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&VCRenderer::addWindow,
                    static_cast<VCRenderer *>(this), _1));
    returnValue->setInsertMethod(
        boost::bind(&VCRenderer::insertWindow,
                    static_cast<VCRenderer *>(this), _1, _2));
    returnValue->setReplaceMethod(
        boost::bind(&VCRenderer::replaceWindow,
                    static_cast<VCRenderer *>(this), _1, _2));
    returnValue->setReplaceObjMethod(
        boost::bind(&VCRenderer::replaceWindowByObj,
                    static_cast<VCRenderer *>(this), _1, _2));
    returnValue->setRemoveMethod(
        boost::bind(&VCRenderer::subWindow,
                    static_cast<VCRenderer *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&VCRenderer::subWindowByObj,
                    static_cast<VCRenderer *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&VCRenderer::clearWindows,
                    static_cast<VCRenderer *>(this)));

    editMField(WindowsFieldMask, _mfWindows);

    return returnValue;
}

GetFieldHandlePtr VCRendererBase::getHandleRenderTasks     (void) const
{
    MFUnrecVCRenderTaskPtr::GetHandlePtr returnValue(
        new  MFUnrecVCRenderTaskPtr::GetHandle(
             &_mfRenderTasks,
             this->getType().getFieldDesc(RenderTasksFieldId),
             const_cast<VCRendererBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VCRendererBase::editHandleRenderTasks    (void)
{
    MFUnrecVCRenderTaskPtr::EditHandlePtr returnValue(
        new  MFUnrecVCRenderTaskPtr::EditHandle(
             &_mfRenderTasks,
             this->getType().getFieldDesc(RenderTasksFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&VCRenderer::addRenderTask,
                    static_cast<VCRenderer *>(this), _1));
    returnValue->setInsertMethod(
        boost::bind(&VCRenderer::insertIntoRenderTasks,
                    static_cast<VCRenderer *>(this), _1, _2));
    returnValue->setReplaceMethod(
        boost::bind(&VCRenderer::replaceInRenderTasks,
                    static_cast<VCRenderer *>(this), _1, _2));
    returnValue->setReplaceObjMethod(
        boost::bind(&VCRenderer::replaceObjInRenderTasks,
                    static_cast<VCRenderer *>(this), _1, _2));
    returnValue->setRemoveMethod(
        boost::bind(&VCRenderer::subRenderTask,
                    static_cast<VCRenderer *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&VCRenderer::removeObjFromRenderTasks,
                    static_cast<VCRenderer *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&VCRenderer::clearRenderTasks,
                    static_cast<VCRenderer *>(this)));

    editMField(RenderTasksFieldMask, _mfRenderTasks);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void VCRendererBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    VCRenderer *pThis = static_cast<VCRenderer *>(this);

    pThis->execSync(static_cast<VCRenderer *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *VCRendererBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    VCRenderer *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const VCRenderer *>(pRefAspect),
                  dynamic_cast<const VCRenderer *>(this));

    return returnValue;
}
#endif

void VCRendererBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<VCRenderer *>(this)->clearWindows();

    static_cast<VCRenderer *>(this)->clearRenderTasks();


}


VCORE_END_NAMESPACE
