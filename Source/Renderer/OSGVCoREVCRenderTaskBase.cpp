/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class VCRenderTask!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#include "OSGConfig.h"



#include "OSGViewport.h"                // Viewport Class

#include "OSGVCoREVCRenderTaskBase.h"
#include "OSGVCoREVCRenderTask.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

VCORE_IMPORT_NAMESPACE;

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::VCRenderTask
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Viewport *      VCRenderTaskBase::_sfViewport
    
*/

/*! \var bool            VCRenderTaskBase::_sfDone
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<VCRenderTask *, nsVCoRE>::_type(
    "VCRenderTaskPtr", 
    "AttachmentContainerPtr", 
    VCRenderTask::getClassType(),
    nsVCoRE);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(VCRenderTask *, nsVCoRE)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           VCRenderTask *,
                           nsVCoRE);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           VCRenderTask *,
                           nsVCoRE);

OSG_END_NAMESPACE

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

VCORE_BEGIN_NAMESPACE

OSG_IMPORT_NAMESPACE;

void VCRenderTaskBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecViewportPtr::Description(
        SFUnrecViewportPtr::getClassType(),
        "viewport",
        "",
        ViewportFieldId, ViewportFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&VCRenderTask::editHandleViewport),
        static_cast<FieldGetMethodSig >(&VCRenderTask::getHandleViewport));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "done",
        "",
        DoneFieldId, DoneFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&VCRenderTask::editHandleDone),
        static_cast<FieldGetMethodSig >(&VCRenderTask::getHandleDone));

    oType.addInitialDesc(pDesc);
}


VCRenderTaskBase::TypeObject VCRenderTaskBase::_type(
    VCRenderTaskBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsVCoRE, //Namespace
    reinterpret_cast<PrototypeCreateF>(&VCRenderTaskBase::createEmptyLocal),
    VCRenderTask::initMethod,
    VCRenderTask::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&VCRenderTask::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\" ?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"VCRenderTask\"\n"
    "   parent=\"AttachmentContainer\"\n"
    "   parentnamespace=\"OSG\"\n"
    "   library=\"VCoRERenderer\"\n"
    "   structure=\"concrete\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   isNodeCore=\"false\"\n"
    "   docGroupBase=\"GrpVCoreRenderer\"\n"
    "   typeDescAddable=\"false\"\n"
    "   dynFCDerived=\"false\"\n"
    "   libnamespace=\"VCoRE\"\n"
    "   >\n"
    "   <Field\n"
    "     name=\"viewport\"\n"
    "     type=\"ViewportPtr\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     defaultValue=\"NULL\"\n"
    "     fieldHeader=\"OSGViewport.h\"\n"
    "     typeHeader=\"OSGViewport.h\"\n"
    "     >\n"
    "   </Field>\n"
    "   <Field\n"
    "     name=\"done\"\n"
    "     type=\"bool\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     defaultValue=\"false\"\n"
    "     >\n"
    "  </Field>\n"
    "\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &VCRenderTaskBase::getType(void)
{
    return _type;
}

const FieldContainerType &VCRenderTaskBase::getType(void) const
{
    return _type;
}

UInt32 VCRenderTaskBase::getContainerSize(void) const
{
    return sizeof(VCRenderTask);
}

/*------------------------- decorator get ------------------------------*/


//! Get the VCRenderTask::_sfViewport field.
const SFUnrecViewportPtr *VCRenderTaskBase::getSFViewport(void) const
{
    return &_sfViewport;
}

SFUnrecViewportPtr  *VCRenderTaskBase::editSFViewport       (void)
{
    editSField(ViewportFieldMask);

    return &_sfViewport;
}

//! Get the value of the VCRenderTask::_sfViewport field.
Viewport * VCRenderTaskBase::getViewport(void) const
{
    return _sfViewport.getValue();
}

//! Set the value of the VCRenderTask::_sfViewport field.
void VCRenderTaskBase::setViewport(Viewport * const value)
{
    editSField(ViewportFieldMask);

    _sfViewport.setValue(value);
}


SFBool *VCRenderTaskBase::editSFDone(void)
{
    editSField(DoneFieldMask);

    return &_sfDone;
}

const SFBool *VCRenderTaskBase::getSFDone(void) const
{
    return &_sfDone;
}






/*------------------------------ access -----------------------------------*/

SizeT VCRenderTaskBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ViewportFieldMask & whichField))
    {
        returnValue += _sfViewport.getBinSize();
    }
    if(FieldBits::NoField != (DoneFieldMask & whichField))
    {
        returnValue += _sfDone.getBinSize();
    }

    return returnValue;
}

void VCRenderTaskBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ViewportFieldMask & whichField))
    {
        _sfViewport.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DoneFieldMask & whichField))
    {
        _sfDone.copyToBin(pMem);
    }
}

void VCRenderTaskBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ViewportFieldMask & whichField))
    {
        editSField(ViewportFieldMask);
        _sfViewport.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DoneFieldMask & whichField))
    {
        editSField(DoneFieldMask);
        _sfDone.copyFromBin(pMem);
    }
}

//! create a new instance of the class
VCRenderTaskTransitPtr VCRenderTaskBase::createLocal(BitVector bFlags)
{
    VCRenderTaskTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<VCRenderTask>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
VCRenderTaskTransitPtr VCRenderTaskBase::createDependent(BitVector bFlags)
{
    VCRenderTaskTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<VCRenderTask>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
VCRenderTaskTransitPtr VCRenderTaskBase::create(void)
{
    VCRenderTaskTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<VCRenderTask>(tmpPtr);
    }

    return fc;
}

VCRenderTask *VCRenderTaskBase::createEmptyLocal(BitVector bFlags)
{
    VCRenderTask *returnValue;

    newPtr<VCRenderTask>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
VCRenderTask *VCRenderTaskBase::createEmpty(void)
{
    VCRenderTask *returnValue;

    newPtr<VCRenderTask>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr VCRenderTaskBase::shallowCopyLocal(
    BitVector bFlags) const
{
    VCRenderTask *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const VCRenderTask *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr VCRenderTaskBase::shallowCopyDependent(
    BitVector bFlags) const
{
    VCRenderTask *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const VCRenderTask *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr VCRenderTaskBase::shallowCopy(void) const
{
    VCRenderTask *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const VCRenderTask *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

VCRenderTaskBase::VCRenderTaskBase(void) :
    Inherited(),
    _sfViewport               (NULL),
    _sfDone                   (bool(false))
{
}

VCRenderTaskBase::VCRenderTaskBase(const VCRenderTaskBase &source) :
    Inherited(source),
    _sfViewport               (NULL),
    _sfDone                   (source._sfDone                   )
{
}


/*-------------------------- destructors ----------------------------------*/

VCRenderTaskBase::~VCRenderTaskBase(void)
{
}

void VCRenderTaskBase::onCreate(const VCRenderTask *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        VCRenderTask *pThis = static_cast<VCRenderTask *>(this);

        pThis->setViewport(source->getViewport());
    }
}

GetFieldHandlePtr VCRenderTaskBase::getHandleViewport        (void) const
{
    SFUnrecViewportPtr::GetHandlePtr returnValue(
        new  SFUnrecViewportPtr::GetHandle(
             &_sfViewport,
             this->getType().getFieldDesc(ViewportFieldId),
             const_cast<VCRenderTaskBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VCRenderTaskBase::editHandleViewport       (void)
{
    SFUnrecViewportPtr::EditHandlePtr returnValue(
        new  SFUnrecViewportPtr::EditHandle(
             &_sfViewport,
             this->getType().getFieldDesc(ViewportFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&VCRenderTask::setViewport,
                    static_cast<VCRenderTask *>(this), _1));

    editSField(ViewportFieldMask);

    return returnValue;
}

GetFieldHandlePtr VCRenderTaskBase::getHandleDone            (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfDone,
             this->getType().getFieldDesc(DoneFieldId),
             const_cast<VCRenderTaskBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VCRenderTaskBase::editHandleDone           (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfDone,
             this->getType().getFieldDesc(DoneFieldId),
             this));


    editSField(DoneFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void VCRenderTaskBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    VCRenderTask *pThis = static_cast<VCRenderTask *>(this);

    pThis->execSync(static_cast<VCRenderTask *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *VCRenderTaskBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    VCRenderTask *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const VCRenderTask *>(pRefAspect),
                  dynamic_cast<const VCRenderTask *>(this));

    return returnValue;
}
#endif

void VCRenderTaskBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<VCRenderTask *>(this)->setViewport(NULL);


}


VCORE_END_NAMESPACE
